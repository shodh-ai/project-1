// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.28.3
// source: interaction.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "rox.interaction";

/** For simple notifications if agent calls client and no specific response is needed. */
export interface Empty {
}

/** Message sent from frontend when a button is clicked */
export interface FrontendButtonClickRequest {
  /** Identifier for the button, e.g., "my_action_button" */
  buttonId: string;
  /** Optional: any string data you want to send */
  customData: string;
}

/** Response from the agent for the button click */
export interface AgentResponse {
  /** e.g., "Button click processed" */
  statusMessage: string;
  /** Optional: any data agent wants to return */
  dataPayload: string;
}

function createBaseEmpty(): Empty {
  return {};
}

export const Empty: MessageFns<Empty> = {
  encode(_: Empty, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Empty {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEmpty();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Empty {
    return {};
  },

  toJSON(_: Empty): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<Empty>): Empty {
    return Empty.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<Empty>): Empty {
    const message = createBaseEmpty();
    return message;
  },
};

function createBaseFrontendButtonClickRequest(): FrontendButtonClickRequest {
  return { buttonId: "", customData: "" };
}

export const FrontendButtonClickRequest: MessageFns<FrontendButtonClickRequest> = {
  encode(message: FrontendButtonClickRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.buttonId !== "") {
      writer.uint32(10).string(message.buttonId);
    }
    if (message.customData !== "") {
      writer.uint32(18).string(message.customData);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FrontendButtonClickRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFrontendButtonClickRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.buttonId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.customData = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FrontendButtonClickRequest {
    return {
      buttonId: isSet(object.buttonId) ? globalThis.String(object.buttonId) : "",
      customData: isSet(object.customData) ? globalThis.String(object.customData) : "",
    };
  },

  toJSON(message: FrontendButtonClickRequest): unknown {
    const obj: any = {};
    if (message.buttonId !== "") {
      obj.buttonId = message.buttonId;
    }
    if (message.customData !== "") {
      obj.customData = message.customData;
    }
    return obj;
  },

  create(base?: DeepPartial<FrontendButtonClickRequest>): FrontendButtonClickRequest {
    return FrontendButtonClickRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FrontendButtonClickRequest>): FrontendButtonClickRequest {
    const message = createBaseFrontendButtonClickRequest();
    message.buttonId = object.buttonId ?? "";
    message.customData = object.customData ?? "";
    return message;
  },
};

function createBaseAgentResponse(): AgentResponse {
  return { statusMessage: "", dataPayload: "" };
}

export const AgentResponse: MessageFns<AgentResponse> = {
  encode(message: AgentResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.statusMessage !== "") {
      writer.uint32(10).string(message.statusMessage);
    }
    if (message.dataPayload !== "") {
      writer.uint32(18).string(message.dataPayload);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AgentResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAgentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.statusMessage = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.dataPayload = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AgentResponse {
    return {
      statusMessage: isSet(object.statusMessage) ? globalThis.String(object.statusMessage) : "",
      dataPayload: isSet(object.dataPayload) ? globalThis.String(object.dataPayload) : "",
    };
  },

  toJSON(message: AgentResponse): unknown {
    const obj: any = {};
    if (message.statusMessage !== "") {
      obj.statusMessage = message.statusMessage;
    }
    if (message.dataPayload !== "") {
      obj.dataPayload = message.dataPayload;
    }
    return obj;
  },

  create(base?: DeepPartial<AgentResponse>): AgentResponse {
    return AgentResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AgentResponse>): AgentResponse {
    const message = createBaseAgentResponse();
    message.statusMessage = object.statusMessage ?? "";
    message.dataPayload = object.dataPayload ?? "";
    return message;
  },
};

/** Service the agent will implement (called by frontend) */
export interface AgentInteraction {
  HandleFrontendButton(request: FrontendButtonClickRequest): Promise<AgentResponse>;
}

export const AgentInteractionServiceName = "rox.interaction.AgentInteraction";
export class AgentInteractionClientImpl implements AgentInteraction {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || AgentInteractionServiceName;
    this.rpc = rpc;
    this.HandleFrontendButton = this.HandleFrontendButton.bind(this);
  }
  HandleFrontendButton(request: FrontendButtonClickRequest): Promise<AgentResponse> {
    const data = FrontendButtonClickRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "HandleFrontendButton", data);
    return promise.then((data) => AgentResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
