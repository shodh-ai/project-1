'use client';

import { useState, useEffect } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { signIn, useSession, signOut } from 'next-auth/react';
import Image from 'next/image';
import Link from 'next/link';
import styles from './login.module.css';

export default function LoginPage() {
  const router = useRouter();
  const { data: session, status } = useSession();
  const searchParams = useSearchParams();
  const error = searchParams ? searchParams.get('error') : null;
  
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [errorMessage, setErrorMessage] = useState('');
  const [showForgotPassword, setShowForgotPassword] = useState(false);
  const [resetEmail, setResetEmail] = useState('');
  const [resetSuccess, setResetSuccess] = useState(false);
  
  // Only handle errors, no auto-redirect
  useEffect(() => {
    // Handle errors from NextAuth
    if (error) {
      switch (error) {
        case 'CredentialsSignin':
          setErrorMessage('Invalid email or password');
          break;
        default:
          setErrorMessage('An error occurred during sign in');
          break;
      }
    }
  }, [error]);

  // Add function to logout current user
  const handleLogout = async () => {
    await signOut({ redirect: false });
    // The page will not automatically reload, so we'll set a message
    setErrorMessage('You have been logged out. Please log in again.');
  };

  // Function to manually navigate to main page
  const goToMainPage = () => {
    router.push('/roxpage');
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!email.trim()) {
      setErrorMessage('Please enter your email');
      return;
    }
    
    setIsLoading(true);
    setErrorMessage('');
    
    try {
      // Sign in with credentials using NextAuth
      const result = await signIn('credentials', {
        username: email,
        password: password,
        redirect: false,
      });
      
      if (result?.error) {
        setErrorMessage('Invalid email or password');
        setIsLoading(false);
      } else if (result?.ok) {
        // Manually redirect on successful login
        router.push('/roxpage');
      }
    } catch (err) {
      setErrorMessage('Authentication failed. Please try again.');
      setIsLoading(false);
    }
  };

  // Handle social media login
  const handleSocialLogin = async (provider: string) => {
    setIsLoading(true);
    setErrorMessage('');
    
    try {
      // Use NextAuth signIn method with the specified provider
      await signIn(provider.toLowerCase(), { callbackUrl: '/roxpage' });
      
      // Note: no need to set isLoading to false here as we're redirecting
    } catch (err) {
      setErrorMessage(`Error signing in with ${provider}`);
      setIsLoading(false);
    }
  };
  
  // Handle forgot password request
  const handleForgotPassword = () => {
    setShowForgotPassword(true);
  };

  // Return to login from forgot password
  const handleBackToLogin = () => {
    setShowForgotPassword(false);
    setResetSuccess(false);
    setResetEmail('');
    setErrorMessage('');
  };

  // Handle password reset submission
  const handleResetSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!resetEmail.trim()) {
      setErrorMessage('Please enter your email');
      return;
    }

    setIsLoading(true);
    setErrorMessage('');
    
    try {
      // In a real app, this would call your API to initiate password reset
      // For now, we'll simulate a successful request after a delay
      // Replace this with actual API call when connected to a real backend
      
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      // Show success message
      setResetSuccess(true);
      setIsLoading(false);
    } catch (err) {
      setErrorMessage('Failed to send password reset email. Please try again.');
      setIsLoading(false);
    }
  };

  return (
    <div className={styles.loginPage}>
      {/* Background elements */}
      <div className={styles.group1000010987}>
        <div className={styles.ellipse3}></div>
        <div className={styles.ellipse4}></div>
        <div className={styles.rectangle3996}></div>
      </div>
      
      {/* Main card container */}
      <div className={styles.rectangle3934}>
        {/* Left side - Image */}
        <div className={styles.imageContainer}>
          <Image 
            src="/login-image.jpg" 
            alt="Login" 
            fill 
            className={styles.loginImage}
            priority
          />
        </div>
        
        {/* Right side - Login form */}
        <div className={styles.group1000010988}>
          <div className={styles.formEllipse3}></div>
          <div className={styles.formEllipse4}></div>
          <div className={styles.formRectangle3996}></div>
          
          {/* Login form content */}
          <div className={styles.frame1000011209}>
            {/* Logo and tagline */}
            <div className={styles.frame1000011149}>
              <div className={styles.group31}>
                <div className={styles.frame11}>
                  <Image
                    src="/logo.svg"
                    alt="Logo"
                    width={35}
                    height={42}
                    className={styles.logoImage}
                  />
                  <span className={styles.shodhAI}>Shodh AI</span>
                </div>
              </div>
              <p className={styles.tagline}>AI-Powered Insights for Smarter Learning.</p>
            </div>
            
            {/* Form title */}
            <div className={styles.frame1000011206}>
              <p className={styles.welcomeBack}>Welcome Back</p>
              <p className={styles.signInToContinue}>Sign in to continue</p>
            </div>
            
            {/* Form container */}
            <div className={styles.frame1000011207}>
              <div className={styles.frame1000011205}>
                {/* Already logged in */}
                {status === 'authenticated' ? (
                  <div className={styles.loggedInContainer}>
                    <div className="flex items-center justify-center mb-4">
                      <div className="bg-green-100 text-green-800 py-2 px-4 rounded-full flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                          <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                        </svg>
                        <span>Signed in as {session?.user?.name || session?.user?.email}</span>
                      </div>
                    </div>
                    <div className="flex flex-col gap-3">
                      <button 
                        onClick={goToMainPage}
                        className={styles.primaryButton}
                      >
                        <span className={styles.buttonLabel}>Go to Dashboard</span>
                      </button>
                      <button 
                        onClick={handleLogout}
                        className={styles.primaryButton}
                        style={{ marginTop: '10px', flex: '1', background: '#f44336' }}
                      >
                        <span className={styles.buttonLabel}>Logout</span>
                      </button>
                    </div>
                  </div>
                ) : showForgotPassword ? (
                  // Password Reset Form - preserve original styling
                  resetSuccess ? (
                    // Success message for password reset
                    <div className={styles.frame1000011206}>
                      <div className="text-green-500 flex justify-center mb-4">
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-12 w-12" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                        </svg>
                      </div>
                      <p className={styles.welcomeBack}>Email Sent</p>
                      <p className={styles.signInToContinue}>
                        If an account exists with {resetEmail}, you will receive password reset instructions.
                      </p>
                      <button
                        type="button"
                        onClick={handleBackToLogin}
                        className={styles.primaryButton}
                        style={{ marginTop: '24px' }}
                      >
                        <span className={styles.buttonLabel}>Back to Login</span>
                      </button>
                    </div>
                  ) : (
                    // Password reset form
                    <form onSubmit={handleResetSubmit} className={styles.frame1000011206}>
                      <p className={styles.welcomeBack}>Reset Password</p>
                      <p className={styles.signInToContinue}>Enter your email to receive reset instructions</p>
                      
                      <div className={styles.frame1000011144}>
                        <div className={styles.frame146}>
                          <input
                            type="email"
                            value={resetEmail}
                            onChange={(e) => setResetEmail(e.target.value)}
                            placeholder="Email"
                            className={styles.emailInput}
                            disabled={isLoading}
                            required
                          />
                        </div>
                      </div>
                      
                      <div style={{ display: 'flex', gap: '12px', marginTop: '12px' }}>
                        <button
                          type="button"
                          onClick={handleBackToLogin}
                          style={{ 
                            flex: 1,
                            padding: '12px 0',
                            borderRadius: '6px',
                            border: '1px solid rgba(0, 0, 0, 0.2)',
                            background: '#fff',
                            color: '#000',
                            fontWeight: 600,
                            fontSize: '14px',
                            cursor: 'pointer'
                          }}
                          disabled={isLoading}
                        >
                          Cancel
                        </button>
                        <button
                          type="submit"
                          disabled={isLoading}
                          className={styles.primaryButton}
                          style={{ flex: 1 }}
                        >
                          <span className={styles.buttonLabel}>{isLoading ? 'Sending...' : 'Send Reset Link'}</span>
                        </button>
                      </div>
                    </form>
                  )
                ) : (
                  // Normal login form
                  <>
                    <form onSubmit={handleSubmit} className={styles.frame1000011206}>
                      <div className={styles.frame1000011144}>
                        <div className={styles.frame146}>
                          <input
                            type="email"
                            value={email}
                            onChange={(e) => setEmail(e.target.value)}
                            placeholder="Email"
                            className={styles.emailInput}
                            disabled={isLoading}
                            required
                          />
                        </div>
                      </div>
                      <div className={styles.frame1000011144}>
                        <div className={styles.frame146}>
                          <input
                            type="password"
                            value={password}
                            onChange={(e) => setPassword(e.target.value)}
                            placeholder="Password"
                            className={styles.emailInput}
                            disabled={isLoading}
                            required
                          />
                        </div>
                      </div>
                      <button 
                        type="submit"
                        disabled={isLoading}
                        className={styles.primaryButton}
                      >
                        <span className={styles.buttonLabel}>{isLoading ? 'Logging in...' : 'Login'}</span>
                      </button>
                    </form>
                    
                    {/* Divider */}
                    <div className={styles.line1}></div>
                    
                    {/* Social login */}
                    <div className={styles.frame1000011204}>
                      <p className={styles.loginWith}>Login with</p>
                      
                      <div className={styles.frame1000011203}>
                        <button
                          onClick={() => handleSocialLogin('Google')}
                          disabled={isLoading}
                          className={styles.frame1000010992}
                        >
                          <svg className={styles.googleIcon} xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" fill="none" style={{ minWidth: '24px', minHeight: '24px', display: 'block' }}>
                            <path d="M21.9 12.1h-10v3.9h5.7c-.5 2.5-2.6 4.3-5.7 4.3-3.5 0-6.3-2.8-6.3-6.3s2.8-6.3 6.3-6.3c1.5 0 2.9.5 4 1.4l2.9-2.9C16.9 4.3 14.6 3.3 12 3.3c-4.9 0-8.9 4-8.9 8.9s4 8.9 8.9 8.9c7.2 0 8.9-6.3 8.2-9h-9.2z" fill="#566FE9" />
                          </svg>
                          <span className={styles.socialLabel}>Google</span>
                        </button>
                        
                        <button
                          onClick={() => handleSocialLogin('Apple')}
                          disabled={isLoading}
                          className={styles.frame1000011201}
                        >
                          <svg className={styles.appleIcon} xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" fill="none" style={{ minWidth: '24px', minHeight: '24px', display: 'block' }}>
                            <path d="M17.5 12.5c0-3.5 2.9-4.1 3-4.2-1.6-2.4-4.2-2.7-5.1-2.7-2.2-.2-4.3 1.3-5.4 1.3-1.1 0-2.8-1.3-4.6-1.2-2.4 0-4.5 1.4-5.7 3.5-2.5 4.2-.6 10.5 1.7 13.9 1.2 1.7 2.6 3.5 4.4 3.5 1.8 0 2.4-1.1 4.6-1.1 2.1 0 2.7 1.1 4.6 1.1 1.9 0 3.1-1.7 4.3-3.4.8-1.2 1.5-2.5 1.9-3.9-3.3-1.2-4.7-5.9-4.7-7.8z" fill="#566FE9" />
                            <path d="M14.5 4c1-.4 1.8-1.4 2.1-2.4-1.9.1-4.2 1.3-5.4 2.8-1.1 1.3-2 3.2-1.7 5.1 2 .2 4.1-1.1 5-3.5z" fill="#566FE9" />
                          </svg>
                          <span className={styles.socialLabel}>Apple</span>
                        </button>
                        
                        <button
                          onClick={() => handleSocialLogin('Facebook')}
                          disabled={isLoading}
                          className={styles.frame1000011202}
                        >
                          <svg className={styles.facebookIcon} xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" fill="none" style={{ minWidth: '24px', minHeight: '24px', display: 'block' }}>
                            <path d="M24 12c0-6.627-5.373-12-12-12S0 5.373 0 12c0 5.99 4.388 10.954 10.125 11.855v-8.386H7.078V12h3.047V9.356c0-3.007 1.79-4.668 4.533-4.668 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.49 0-1.955.925-1.955 1.874V12h3.328l-.532 3.47h-2.796v8.385C19.612 22.954 24 17.99 24 12z" fill="#566FE9" />
                          </svg>
                          <span className={styles.socialLabel}>Facebook</span>
                        </button>
                      </div>
                    </div>
                  </>
                )}
                
                {errorMessage && <p className="text-red-500 text-center text-sm mt-4">{errorMessage}</p>}
              </div>
              
              {/* Forgot password and Sign up link - only show when not logged in and not on forgot password screen */}
              {status !== 'authenticated' && !showForgotPassword && (
                <>
                  <p className={styles.forgotPassword}>
                    <button 
                      type="button" 
                      onClick={handleForgotPassword}
                      style={{ 
                        background: 'none',
                        border: 'none',
                        color: '#566FE9',
                        cursor: 'pointer',
                        padding: 0
                      }}
                    >
                      Forgot your password?
                    </button>
                  </p>
                  
                  <p className={styles.signUpText}>
                    Don&#39;t have a account? <Link href="/signuppage" style={{ color: '#566FE9' }}>Sign Up</Link>
                  </p>
                </>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
