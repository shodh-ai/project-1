"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_src_utils_storageUtils_ts"],{

/***/ "(app-pages-browser)/./src/utils/storageUtils.ts":
/*!***********************************!*\
  !*** ./src/utils/storageUtils.ts ***!
  \***********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   compressImageDataUrl: function() { return /* binding */ compressImageDataUrl; },\n/* harmony export */   estimateLocalStorageUsage: function() { return /* binding */ estimateLocalStorageUsage; },\n/* harmony export */   optimizeCanvasDataForStorage: function() { return /* binding */ optimizeCanvasDataForStorage; },\n/* harmony export */   safeLocalStorage: function() { return /* binding */ safeLocalStorage; }\n/* harmony export */ });\n/**\n * Utility functions to help with localStorage optimization and management\n */ /**\n * Compresses image data in a canvas state object to reduce localStorage usage.\n * This function will resize/compress any large image URLs in the canvas elements.\n */ function optimizeCanvasDataForStorage(canvasData) {\n    return canvasData.map((element)=>{\n        // Clone the element to avoid modifying the original\n        const optimizedElement = {\n            ...element\n        };\n        // If it's an image element with a data URL\n        if (element.type === \"image\" && typeof element.url === \"string\" && element.url.startsWith(\"data:image\")) {\n            // Replace with a compressed version\n            optimizedElement.url = compressImageDataUrl(element.url, 0.7, 800); // 70% quality, max 800px\n        }\n        // Also check metadata for image data\n        if (element.metadata) {\n            const newMetadata = {\n                ...element.metadata\n            };\n            // Check for originalImage in metadata (often holds a base64 image)\n            if (typeof newMetadata.originalImage === \"string\" && newMetadata.originalImage.startsWith(\"data:image\")) {\n                newMetadata.originalImage = compressImageDataUrl(newMetadata.originalImage, 0.6, 400); // More aggressive compression for metadata\n            }\n            optimizedElement.metadata = newMetadata;\n        }\n        return optimizedElement;\n    });\n}\n/**\n * Compresses a data URL image by resizing and reducing quality.\n * @param dataUrl The original data URL\n * @param quality Quality factor (0-1)\n * @param maxDimension Maximum width or height\n * @returns Compressed data URL\n */ function compressImageDataUrl(dataUrl) {\n    let quality = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0.8, maxDimension = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1024;\n    try {\n        // If the data URL is already small, don't process it\n        if (dataUrl.length < 10000) {\n            return dataUrl;\n        }\n        // Create temporary image and canvas in memory\n        const img = document.createElement(\"img\");\n        img.src = dataUrl;\n        // Create a canvas element to draw the resized image\n        const canvas = document.createElement(\"canvas\");\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) {\n            console.warn(\"Unable to get canvas context for compression\");\n            return dataUrl;\n        }\n        // Calculate new dimensions while maintaining aspect ratio\n        let width = img.width;\n        let height = img.height;\n        if (width > height && width > maxDimension) {\n            height = Math.round(height * maxDimension / width);\n            width = maxDimension;\n        } else if (height > maxDimension) {\n            width = Math.round(width * maxDimension / height);\n            height = maxDimension;\n        }\n        // Set canvas size to the new dimensions\n        canvas.width = width;\n        canvas.height = height;\n        // Draw the resized image on the canvas\n        ctx.drawImage(img, 0, 0, width, height);\n        // Convert to compressed data URL\n        return canvas.toDataURL(\"image/jpeg\", quality);\n    } catch (error) {\n        console.error(\"Error compressing image:\", error);\n        // Return original if compression fails\n        return dataUrl;\n    }\n}\n/**\n * Safely stores data in localStorage with size checks\n * @param key localStorage key\n * @param data Data to store\n * @returns true if successful, false if failed\n */ function safeLocalStorage(key, data) {\n    try {\n        // Check data size\n        const sizeInMB = data.length * 2 / 1024 / 1024; // Rough estimation of string size in MB\n        if (sizeInMB > 4) {\n            console.warn(\"Data for \".concat(key, \" is very large (\").concat(sizeInMB.toFixed(2), \"MB), may exceed localStorage limits\"));\n        }\n        // Try to store it\n        localStorage.setItem(key, data);\n        return true;\n    } catch (error) {\n        console.error(\"Failed to save data to localStorage for key \".concat(key, \":\"), error);\n        return false;\n    }\n}\n/**\n * Estimate the current localStorage usage as a percentage of available space\n * This is approximate since browsers don't expose exact quota information\n */ function estimateLocalStorageUsage() {\n    try {\n        // Get all keys\n        const keys = Object.keys(localStorage);\n        let totalSize = 0;\n        // Calculate total size of all items\n        keys.forEach((key)=>{\n            const value = localStorage.getItem(key);\n            if (value) {\n                totalSize += key.length + value.length;\n            }\n        });\n        // Convert to MB (approximate)\n        const sizeInMB = totalSize * 2 / 1024 / 1024;\n        // Estimate quota (most browsers have 5-10MB)\n        const estimatedQuota = 5; // Conservative estimate in MB\n        // Return as percentage\n        return Math.min(100, sizeInMB / estimatedQuota * 100);\n    } catch (error) {\n        console.error(\"Error estimating localStorage usage:\", error);\n        return 0;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/utils/storageUtils.ts\n"));

/***/ })

}]);