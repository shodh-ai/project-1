"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/livekit-server-sdk";
exports.ids = ["vendor-chunks/livekit-server-sdk"];
exports.modules = {

/***/ "(rsc)/./node_modules/livekit-server-sdk/dist/AccessToken.js":
/*!*************************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/AccessToken.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AccessToken: () => (/* binding */ AccessToken),\n/* harmony export */   TokenVerifier: () => (/* binding */ TokenVerifier)\n/* harmony export */ });\n/* harmony import */ var jose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jose */ \"(rsc)/./node_modules/jose/dist/node/esm/jwt/sign.js\");\n/* harmony import */ var jose__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jose */ \"(rsc)/./node_modules/jose/dist/node/esm/jwt/verify.js\");\n/* harmony import */ var _grants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./grants.js */ \"(rsc)/./node_modules/livekit-server-sdk/dist/grants.js\");\n\n\nconst defaultTTL = `6h`;\nconst defaultClockToleranceSeconds = 10;\nclass AccessToken {\n    /**\n   * Creates a new AccessToken\n   * @param apiKey - API Key, can be set in env LIVEKIT_API_KEY\n   * @param apiSecret - Secret, can be set in env LIVEKIT_API_SECRET\n   */ constructor(apiKey, apiSecret, options){\n        if (!apiKey) {\n            apiKey = process.env.LIVEKIT_API_KEY;\n        }\n        if (!apiSecret) {\n            apiSecret = process.env.LIVEKIT_API_SECRET;\n        }\n        if (!apiKey || !apiSecret) {\n            throw Error(\"api-key and api-secret must be set\");\n        } else if (typeof document !== \"undefined\") {\n            console.error(\"You should not include your API secret in your web client bundle.\\n\\nYour web client should request a token from your backend server which should then use the API secret to generate a token. See https://docs.livekit.io/client/connect/\");\n        }\n        this.apiKey = apiKey;\n        this.apiSecret = apiSecret;\n        this.grants = {};\n        this.identity = options == null ? void 0 : options.identity;\n        this.ttl = (options == null ? void 0 : options.ttl) || defaultTTL;\n        if (typeof this.ttl === \"number\") {\n            this.ttl = `${this.ttl}s`;\n        }\n        if (options == null ? void 0 : options.metadata) {\n            this.metadata = options.metadata;\n        }\n        if (options == null ? void 0 : options.attributes) {\n            this.attributes = options.attributes;\n        }\n        if (options == null ? void 0 : options.name) {\n            this.name = options.name;\n        }\n    }\n    /**\n   * Adds a video grant to this token.\n   * @param grant -\n   */ addGrant(grant) {\n        this.grants.video = {\n            ...this.grants.video ?? {},\n            ...grant\n        };\n    }\n    /**\n   * Adds a SIP grant to this token.\n   * @param grant -\n   */ addSIPGrant(grant) {\n        this.grants.sip = {\n            ...this.grants.sip ?? {},\n            ...grant\n        };\n    }\n    get name() {\n        return this.grants.name;\n    }\n    set name(name) {\n        this.grants.name = name;\n    }\n    get metadata() {\n        return this.grants.metadata;\n    }\n    /**\n   * Set metadata to be passed to the Participant, used only when joining the room\n   */ set metadata(md) {\n        this.grants.metadata = md;\n    }\n    get attributes() {\n        return this.grants.attributes;\n    }\n    set attributes(attrs) {\n        this.grants.attributes = attrs;\n    }\n    get kind() {\n        return this.grants.kind;\n    }\n    set kind(kind) {\n        this.grants.kind = kind;\n    }\n    get sha256() {\n        return this.grants.sha256;\n    }\n    set sha256(sha) {\n        this.grants.sha256 = sha;\n    }\n    get roomPreset() {\n        return this.grants.roomPreset;\n    }\n    set roomPreset(preset) {\n        this.grants.roomPreset = preset;\n    }\n    get roomConfig() {\n        return this.grants.roomConfig;\n    }\n    set roomConfig(config) {\n        this.grants.roomConfig = config;\n    }\n    /**\n   * @returns JWT encoded token\n   */ async toJwt() {\n        var _a;\n        const secret = new TextEncoder().encode(this.apiSecret);\n        const jwt = new jose__WEBPACK_IMPORTED_MODULE_1__.SignJWT((0,_grants_js__WEBPACK_IMPORTED_MODULE_0__.claimsToJwtPayload)(this.grants)).setProtectedHeader({\n            alg: \"HS256\"\n        }).setIssuer(this.apiKey).setExpirationTime(this.ttl).setNotBefore(0);\n        if (this.identity) {\n            jwt.setSubject(this.identity);\n        } else if ((_a = this.grants.video) == null ? void 0 : _a.roomJoin) {\n            throw Error(\"identity is required for join but not set\");\n        }\n        return jwt.sign(secret);\n    }\n}\nclass TokenVerifier {\n    constructor(apiKey, apiSecret){\n        this.apiKey = apiKey;\n        this.apiSecret = apiSecret;\n    }\n    async verify(token, clockTolerance = defaultClockToleranceSeconds) {\n        const secret = new TextEncoder().encode(this.apiSecret);\n        const { payload } = await jose__WEBPACK_IMPORTED_MODULE_2__.jwtVerify(token, secret, {\n            issuer: this.apiKey,\n            clockTolerance\n        });\n        if (!payload) {\n            throw Error(\"invalid token\");\n        }\n        return payload;\n    }\n}\n //# sourceMappingURL=AccessToken.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/livekit-server-sdk/dist/AccessToken.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/livekit-server-sdk/dist/AgentDispatchClient.js":
/*!*********************************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/AgentDispatchClient.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AgentDispatchClient: () => (/* binding */ AgentDispatchClient)\n/* harmony export */ });\n/* harmony import */ var _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @livekit/protocol */ \"(rsc)/./node_modules/@livekit/protocol/dist/index.mjs\");\n/* harmony import */ var _ServiceBase_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ServiceBase.js */ \"(rsc)/./node_modules/livekit-server-sdk/dist/ServiceBase.js\");\n/* harmony import */ var _TwirpRPC_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./TwirpRPC.js */ \"(rsc)/./node_modules/livekit-server-sdk/dist/TwirpRPC.js\");\n\n\n\nconst svc = \"AgentDispatchService\";\nclass AgentDispatchClient extends _ServiceBase_js__WEBPACK_IMPORTED_MODULE_1__.ServiceBase {\n    /**\n   * @param host - hostname including protocol. i.e. 'https://<project>.livekit.cloud'\n   * @param apiKey - API Key, can be set in env var LIVEKIT_API_KEY\n   * @param secret - API Secret, can be set in env var LIVEKIT_API_SECRET\n   */ constructor(host, apiKey, secret){\n        super(apiKey, secret);\n        this.rpc = new _TwirpRPC_js__WEBPACK_IMPORTED_MODULE_2__.TwirpRpc(host, _TwirpRPC_js__WEBPACK_IMPORTED_MODULE_2__.livekitPackage);\n    }\n    /**\n   * Create an explicit dispatch for an agent to join a room. To use explicit\n   * dispatch, your agent must be registered with an `agentName`.\n   * @param roomName - name of the room to dispatch to\n   * @param agentName - name of the agent to dispatch\n   * @param options - optional metadata to send along with the dispatch\n   * @returns the dispatch that was created\n   */ async createDispatch(roomName, agentName, options) {\n        const req = new _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.CreateAgentDispatchRequest({\n            room: roomName,\n            agentName,\n            metadata: options == null ? void 0 : options.metadata\n        }).toJson();\n        const data = await this.rpc.request(svc, \"CreateDispatch\", req, await this.authHeader({\n            roomAdmin: true,\n            room: roomName\n        }));\n        return _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.AgentDispatch.fromJson(data, {\n            ignoreUnknownFields: true\n        });\n    }\n    /**\n   * Delete an explicit dispatch for an agent in a room.\n   * @param dispatchId - id of the dispatch to delete\n   * @param roomName - name of the room the dispatch is for\n   */ async deleteDispatch(dispatchId, roomName) {\n        const req = new _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.DeleteAgentDispatchRequest({\n            dispatchId,\n            room: roomName\n        }).toJson();\n        await this.rpc.request(svc, \"DeleteDispatch\", req, await this.authHeader({\n            roomAdmin: true,\n            room: roomName\n        }));\n    }\n    /**\n   * Get an Agent dispatch by ID\n   * @param dispatchId - id of the dispatch to get\n   * @param roomName - name of the room the dispatch is for\n   * @returns the dispatch that was found, or undefined if not found\n   */ async getDispatch(dispatchId, roomName) {\n        const req = new _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.ListAgentDispatchRequest({\n            dispatchId,\n            room: roomName\n        }).toJson();\n        const data = await this.rpc.request(svc, \"ListDispatch\", req, await this.authHeader({\n            roomAdmin: true,\n            room: roomName\n        }));\n        const res = _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.ListAgentDispatchResponse.fromJson(data, {\n            ignoreUnknownFields: true\n        });\n        if (res.agentDispatches.length === 0) {\n            return void 0;\n        }\n        return res.agentDispatches[0];\n    }\n    /**\n   * List all agent dispatches for a room\n   * @param roomName - name of the room to list dispatches for\n   * @returns the list of dispatches\n   */ async listDispatch(roomName) {\n        const req = new _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.ListAgentDispatchRequest({\n            room: roomName\n        }).toJson();\n        const data = await this.rpc.request(svc, \"ListDispatch\", req, await this.authHeader({\n            roomAdmin: true,\n            room: roomName\n        }));\n        const res = _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.ListAgentDispatchResponse.fromJson(data, {\n            ignoreUnknownFields: true\n        });\n        return res.agentDispatches;\n    }\n}\n //# sourceMappingURL=AgentDispatchClient.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGl2ZWtpdC1zZXJ2ZXItc2RrL2Rpc3QvQWdlbnREaXNwYXRjaENsaWVudC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBTTJCO0FBQ29CO0FBQ1U7QUFDekQsTUFBTVEsTUFBTTtBQUNaLE1BQU1DLDRCQUE0Qkosd0RBQVdBO0lBQzNDOzs7O0dBSUMsR0FDREssWUFBWUMsSUFBSSxFQUFFQyxNQUFNLEVBQUVDLE1BQU0sQ0FBRTtRQUNoQyxLQUFLLENBQUNELFFBQVFDO1FBQ2QsSUFBSSxDQUFDQyxHQUFHLEdBQUcsSUFBSVIsa0RBQVFBLENBQUNLLE1BQU1KLHdEQUFjQTtJQUM5QztJQUNBOzs7Ozs7O0dBT0MsR0FDRCxNQUFNUSxlQUFlQyxRQUFRLEVBQUVDLFNBQVMsRUFBRUMsT0FBTyxFQUFFO1FBQ2pELE1BQU1DLE1BQU0sSUFBSWxCLHlFQUEwQkEsQ0FBQztZQUN6Q21CLE1BQU1KO1lBQ05DO1lBQ0FJLFVBQVVILFdBQVcsT0FBTyxLQUFLLElBQUlBLFFBQVFHLFFBQVE7UUFDdkQsR0FBR0MsTUFBTTtRQUNULE1BQU1DLE9BQU8sTUFBTSxJQUFJLENBQUNULEdBQUcsQ0FBQ1UsT0FBTyxDQUNqQ2hCLEtBQ0Esa0JBQ0FXLEtBQ0EsTUFBTSxJQUFJLENBQUNNLFVBQVUsQ0FBQztZQUFFQyxXQUFXO1lBQU1OLE1BQU1KO1FBQVM7UUFFMUQsT0FBT2hCLDREQUFhQSxDQUFDMkIsUUFBUSxDQUFDSixNQUFNO1lBQUVLLHFCQUFxQjtRQUFLO0lBQ2xFO0lBQ0E7Ozs7R0FJQyxHQUNELE1BQU1DLGVBQWVDLFVBQVUsRUFBRWQsUUFBUSxFQUFFO1FBQ3pDLE1BQU1HLE1BQU0sSUFBSWpCLHlFQUEwQkEsQ0FBQztZQUN6QzRCO1lBQ0FWLE1BQU1KO1FBQ1IsR0FBR00sTUFBTTtRQUNULE1BQU0sSUFBSSxDQUFDUixHQUFHLENBQUNVLE9BQU8sQ0FDcEJoQixLQUNBLGtCQUNBVyxLQUNBLE1BQU0sSUFBSSxDQUFDTSxVQUFVLENBQUM7WUFBRUMsV0FBVztZQUFNTixNQUFNSjtRQUFTO0lBRTVEO0lBQ0E7Ozs7O0dBS0MsR0FDRCxNQUFNZSxZQUFZRCxVQUFVLEVBQUVkLFFBQVEsRUFBRTtRQUN0QyxNQUFNRyxNQUFNLElBQUloQix1RUFBd0JBLENBQUM7WUFDdkMyQjtZQUNBVixNQUFNSjtRQUNSLEdBQUdNLE1BQU07UUFDVCxNQUFNQyxPQUFPLE1BQU0sSUFBSSxDQUFDVCxHQUFHLENBQUNVLE9BQU8sQ0FDakNoQixLQUNBLGdCQUNBVyxLQUNBLE1BQU0sSUFBSSxDQUFDTSxVQUFVLENBQUM7WUFBRUMsV0FBVztZQUFNTixNQUFNSjtRQUFTO1FBRTFELE1BQU1nQixNQUFNNUIsd0VBQXlCQSxDQUFDdUIsUUFBUSxDQUFDSixNQUFNO1lBQUVLLHFCQUFxQjtRQUFLO1FBQ2pGLElBQUlJLElBQUlDLGVBQWUsQ0FBQ0MsTUFBTSxLQUFLLEdBQUc7WUFDcEMsT0FBTyxLQUFLO1FBQ2Q7UUFDQSxPQUFPRixJQUFJQyxlQUFlLENBQUMsRUFBRTtJQUMvQjtJQUNBOzs7O0dBSUMsR0FDRCxNQUFNRSxhQUFhbkIsUUFBUSxFQUFFO1FBQzNCLE1BQU1HLE1BQU0sSUFBSWhCLHVFQUF3QkEsQ0FBQztZQUN2Q2lCLE1BQU1KO1FBQ1IsR0FBR00sTUFBTTtRQUNULE1BQU1DLE9BQU8sTUFBTSxJQUFJLENBQUNULEdBQUcsQ0FBQ1UsT0FBTyxDQUNqQ2hCLEtBQ0EsZ0JBQ0FXLEtBQ0EsTUFBTSxJQUFJLENBQUNNLFVBQVUsQ0FBQztZQUFFQyxXQUFXO1lBQU1OLE1BQU1KO1FBQVM7UUFFMUQsTUFBTWdCLE1BQU01Qix3RUFBeUJBLENBQUN1QixRQUFRLENBQUNKLE1BQU07WUFBRUsscUJBQXFCO1FBQUs7UUFDakYsT0FBT0ksSUFBSUMsZUFBZTtJQUM1QjtBQUNGO0FBR0UsQ0FDRiwrQ0FBK0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbmltYS1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL2xpdmVraXQtc2VydmVyLXNkay9kaXN0L0FnZW50RGlzcGF0Y2hDbGllbnQuanM/ZjgxMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBBZ2VudERpc3BhdGNoLFxuICBDcmVhdGVBZ2VudERpc3BhdGNoUmVxdWVzdCxcbiAgRGVsZXRlQWdlbnREaXNwYXRjaFJlcXVlc3QsXG4gIExpc3RBZ2VudERpc3BhdGNoUmVxdWVzdCxcbiAgTGlzdEFnZW50RGlzcGF0Y2hSZXNwb25zZVxufSBmcm9tIFwiQGxpdmVraXQvcHJvdG9jb2xcIjtcbmltcG9ydCB7IFNlcnZpY2VCYXNlIH0gZnJvbSBcIi4vU2VydmljZUJhc2UuanNcIjtcbmltcG9ydCB7IFR3aXJwUnBjLCBsaXZla2l0UGFja2FnZSB9IGZyb20gXCIuL1R3aXJwUlBDLmpzXCI7XG5jb25zdCBzdmMgPSBcIkFnZW50RGlzcGF0Y2hTZXJ2aWNlXCI7XG5jbGFzcyBBZ2VudERpc3BhdGNoQ2xpZW50IGV4dGVuZHMgU2VydmljZUJhc2Uge1xuICAvKipcbiAgICogQHBhcmFtIGhvc3QgLSBob3N0bmFtZSBpbmNsdWRpbmcgcHJvdG9jb2wuIGkuZS4gJ2h0dHBzOi8vPHByb2plY3Q+LmxpdmVraXQuY2xvdWQnXG4gICAqIEBwYXJhbSBhcGlLZXkgLSBBUEkgS2V5LCBjYW4gYmUgc2V0IGluIGVudiB2YXIgTElWRUtJVF9BUElfS0VZXG4gICAqIEBwYXJhbSBzZWNyZXQgLSBBUEkgU2VjcmV0LCBjYW4gYmUgc2V0IGluIGVudiB2YXIgTElWRUtJVF9BUElfU0VDUkVUXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihob3N0LCBhcGlLZXksIHNlY3JldCkge1xuICAgIHN1cGVyKGFwaUtleSwgc2VjcmV0KTtcbiAgICB0aGlzLnJwYyA9IG5ldyBUd2lycFJwYyhob3N0LCBsaXZla2l0UGFja2FnZSk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhbiBleHBsaWNpdCBkaXNwYXRjaCBmb3IgYW4gYWdlbnQgdG8gam9pbiBhIHJvb20uIFRvIHVzZSBleHBsaWNpdFxuICAgKiBkaXNwYXRjaCwgeW91ciBhZ2VudCBtdXN0IGJlIHJlZ2lzdGVyZWQgd2l0aCBhbiBgYWdlbnROYW1lYC5cbiAgICogQHBhcmFtIHJvb21OYW1lIC0gbmFtZSBvZiB0aGUgcm9vbSB0byBkaXNwYXRjaCB0b1xuICAgKiBAcGFyYW0gYWdlbnROYW1lIC0gbmFtZSBvZiB0aGUgYWdlbnQgdG8gZGlzcGF0Y2hcbiAgICogQHBhcmFtIG9wdGlvbnMgLSBvcHRpb25hbCBtZXRhZGF0YSB0byBzZW5kIGFsb25nIHdpdGggdGhlIGRpc3BhdGNoXG4gICAqIEByZXR1cm5zIHRoZSBkaXNwYXRjaCB0aGF0IHdhcyBjcmVhdGVkXG4gICAqL1xuICBhc3luYyBjcmVhdGVEaXNwYXRjaChyb29tTmFtZSwgYWdlbnROYW1lLCBvcHRpb25zKSB7XG4gICAgY29uc3QgcmVxID0gbmV3IENyZWF0ZUFnZW50RGlzcGF0Y2hSZXF1ZXN0KHtcbiAgICAgIHJvb206IHJvb21OYW1lLFxuICAgICAgYWdlbnROYW1lLFxuICAgICAgbWV0YWRhdGE6IG9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMubWV0YWRhdGFcbiAgICB9KS50b0pzb24oKTtcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgdGhpcy5ycGMucmVxdWVzdChcbiAgICAgIHN2YyxcbiAgICAgIFwiQ3JlYXRlRGlzcGF0Y2hcIixcbiAgICAgIHJlcSxcbiAgICAgIGF3YWl0IHRoaXMuYXV0aEhlYWRlcih7IHJvb21BZG1pbjogdHJ1ZSwgcm9vbTogcm9vbU5hbWUgfSlcbiAgICApO1xuICAgIHJldHVybiBBZ2VudERpc3BhdGNoLmZyb21Kc29uKGRhdGEsIHsgaWdub3JlVW5rbm93bkZpZWxkczogdHJ1ZSB9KTtcbiAgfVxuICAvKipcbiAgICogRGVsZXRlIGFuIGV4cGxpY2l0IGRpc3BhdGNoIGZvciBhbiBhZ2VudCBpbiBhIHJvb20uXG4gICAqIEBwYXJhbSBkaXNwYXRjaElkIC0gaWQgb2YgdGhlIGRpc3BhdGNoIHRvIGRlbGV0ZVxuICAgKiBAcGFyYW0gcm9vbU5hbWUgLSBuYW1lIG9mIHRoZSByb29tIHRoZSBkaXNwYXRjaCBpcyBmb3JcbiAgICovXG4gIGFzeW5jIGRlbGV0ZURpc3BhdGNoKGRpc3BhdGNoSWQsIHJvb21OYW1lKSB7XG4gICAgY29uc3QgcmVxID0gbmV3IERlbGV0ZUFnZW50RGlzcGF0Y2hSZXF1ZXN0KHtcbiAgICAgIGRpc3BhdGNoSWQsXG4gICAgICByb29tOiByb29tTmFtZVxuICAgIH0pLnRvSnNvbigpO1xuICAgIGF3YWl0IHRoaXMucnBjLnJlcXVlc3QoXG4gICAgICBzdmMsXG4gICAgICBcIkRlbGV0ZURpc3BhdGNoXCIsXG4gICAgICByZXEsXG4gICAgICBhd2FpdCB0aGlzLmF1dGhIZWFkZXIoeyByb29tQWRtaW46IHRydWUsIHJvb206IHJvb21OYW1lIH0pXG4gICAgKTtcbiAgfVxuICAvKipcbiAgICogR2V0IGFuIEFnZW50IGRpc3BhdGNoIGJ5IElEXG4gICAqIEBwYXJhbSBkaXNwYXRjaElkIC0gaWQgb2YgdGhlIGRpc3BhdGNoIHRvIGdldFxuICAgKiBAcGFyYW0gcm9vbU5hbWUgLSBuYW1lIG9mIHRoZSByb29tIHRoZSBkaXNwYXRjaCBpcyBmb3JcbiAgICogQHJldHVybnMgdGhlIGRpc3BhdGNoIHRoYXQgd2FzIGZvdW5kLCBvciB1bmRlZmluZWQgaWYgbm90IGZvdW5kXG4gICAqL1xuICBhc3luYyBnZXREaXNwYXRjaChkaXNwYXRjaElkLCByb29tTmFtZSkge1xuICAgIGNvbnN0IHJlcSA9IG5ldyBMaXN0QWdlbnREaXNwYXRjaFJlcXVlc3Qoe1xuICAgICAgZGlzcGF0Y2hJZCxcbiAgICAgIHJvb206IHJvb21OYW1lXG4gICAgfSkudG9Kc29uKCk7XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHRoaXMucnBjLnJlcXVlc3QoXG4gICAgICBzdmMsXG4gICAgICBcIkxpc3REaXNwYXRjaFwiLFxuICAgICAgcmVxLFxuICAgICAgYXdhaXQgdGhpcy5hdXRoSGVhZGVyKHsgcm9vbUFkbWluOiB0cnVlLCByb29tOiByb29tTmFtZSB9KVxuICAgICk7XG4gICAgY29uc3QgcmVzID0gTGlzdEFnZW50RGlzcGF0Y2hSZXNwb25zZS5mcm9tSnNvbihkYXRhLCB7IGlnbm9yZVVua25vd25GaWVsZHM6IHRydWUgfSk7XG4gICAgaWYgKHJlcy5hZ2VudERpc3BhdGNoZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gdm9pZCAwO1xuICAgIH1cbiAgICByZXR1cm4gcmVzLmFnZW50RGlzcGF0Y2hlc1swXTtcbiAgfVxuICAvKipcbiAgICogTGlzdCBhbGwgYWdlbnQgZGlzcGF0Y2hlcyBmb3IgYSByb29tXG4gICAqIEBwYXJhbSByb29tTmFtZSAtIG5hbWUgb2YgdGhlIHJvb20gdG8gbGlzdCBkaXNwYXRjaGVzIGZvclxuICAgKiBAcmV0dXJucyB0aGUgbGlzdCBvZiBkaXNwYXRjaGVzXG4gICAqL1xuICBhc3luYyBsaXN0RGlzcGF0Y2gocm9vbU5hbWUpIHtcbiAgICBjb25zdCByZXEgPSBuZXcgTGlzdEFnZW50RGlzcGF0Y2hSZXF1ZXN0KHtcbiAgICAgIHJvb206IHJvb21OYW1lXG4gICAgfSkudG9Kc29uKCk7XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHRoaXMucnBjLnJlcXVlc3QoXG4gICAgICBzdmMsXG4gICAgICBcIkxpc3REaXNwYXRjaFwiLFxuICAgICAgcmVxLFxuICAgICAgYXdhaXQgdGhpcy5hdXRoSGVhZGVyKHsgcm9vbUFkbWluOiB0cnVlLCByb29tOiByb29tTmFtZSB9KVxuICAgICk7XG4gICAgY29uc3QgcmVzID0gTGlzdEFnZW50RGlzcGF0Y2hSZXNwb25zZS5mcm9tSnNvbihkYXRhLCB7IGlnbm9yZVVua25vd25GaWVsZHM6IHRydWUgfSk7XG4gICAgcmV0dXJuIHJlcy5hZ2VudERpc3BhdGNoZXM7XG4gIH1cbn1cbmV4cG9ydCB7XG4gIEFnZW50RGlzcGF0Y2hDbGllbnRcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1BZ2VudERpc3BhdGNoQ2xpZW50LmpzLm1hcCJdLCJuYW1lcyI6WyJBZ2VudERpc3BhdGNoIiwiQ3JlYXRlQWdlbnREaXNwYXRjaFJlcXVlc3QiLCJEZWxldGVBZ2VudERpc3BhdGNoUmVxdWVzdCIsIkxpc3RBZ2VudERpc3BhdGNoUmVxdWVzdCIsIkxpc3RBZ2VudERpc3BhdGNoUmVzcG9uc2UiLCJTZXJ2aWNlQmFzZSIsIlR3aXJwUnBjIiwibGl2ZWtpdFBhY2thZ2UiLCJzdmMiLCJBZ2VudERpc3BhdGNoQ2xpZW50IiwiY29uc3RydWN0b3IiLCJob3N0IiwiYXBpS2V5Iiwic2VjcmV0IiwicnBjIiwiY3JlYXRlRGlzcGF0Y2giLCJyb29tTmFtZSIsImFnZW50TmFtZSIsIm9wdGlvbnMiLCJyZXEiLCJyb29tIiwibWV0YWRhdGEiLCJ0b0pzb24iLCJkYXRhIiwicmVxdWVzdCIsImF1dGhIZWFkZXIiLCJyb29tQWRtaW4iLCJmcm9tSnNvbiIsImlnbm9yZVVua25vd25GaWVsZHMiLCJkZWxldGVEaXNwYXRjaCIsImRpc3BhdGNoSWQiLCJnZXREaXNwYXRjaCIsInJlcyIsImFnZW50RGlzcGF0Y2hlcyIsImxlbmd0aCIsImxpc3REaXNwYXRjaCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/livekit-server-sdk/dist/AgentDispatchClient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/livekit-server-sdk/dist/EgressClient.js":
/*!**************************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/EgressClient.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EgressClient: () => (/* binding */ EgressClient)\n/* harmony export */ });\n/* harmony import */ var _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @livekit/protocol */ \"(rsc)/./node_modules/@livekit/protocol/dist/index.mjs\");\n/* harmony import */ var _ServiceBase_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ServiceBase.js */ \"(rsc)/./node_modules/livekit-server-sdk/dist/ServiceBase.js\");\n/* harmony import */ var _TwirpRPC_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./TwirpRPC.js */ \"(rsc)/./node_modules/livekit-server-sdk/dist/TwirpRPC.js\");\n\n\n\nconst svc = \"Egress\";\nclass EgressClient extends _ServiceBase_js__WEBPACK_IMPORTED_MODULE_1__.ServiceBase {\n    /**\n   * @param host - hostname including protocol. i.e. 'https://<project>.livekit.cloud'\n   * @param apiKey - API Key, can be set in env var LIVEKIT_API_KEY\n   * @param secret - API Secret, can be set in env var LIVEKIT_API_SECRET\n   */ constructor(host, apiKey, secret){\n        super(apiKey, secret);\n        this.rpc = new _TwirpRPC_js__WEBPACK_IMPORTED_MODULE_2__.TwirpRpc(host, _TwirpRPC_js__WEBPACK_IMPORTED_MODULE_2__.livekitPackage);\n    }\n    async startRoomCompositeEgress(roomName, output, optsOrLayout, options, audioOnly, videoOnly, customBaseUrl) {\n        let layout;\n        if (optsOrLayout !== void 0) {\n            if (typeof optsOrLayout === \"string\") {\n                layout = optsOrLayout;\n            } else {\n                const opts = optsOrLayout;\n                layout = opts.layout;\n                options = opts.encodingOptions;\n                audioOnly = opts.audioOnly;\n                videoOnly = opts.videoOnly;\n                customBaseUrl = opts.customBaseUrl;\n            }\n        }\n        layout ??= \"\";\n        audioOnly ??= false;\n        videoOnly ??= false;\n        customBaseUrl ??= \"\";\n        const { output: legacyOutput, options: egressOptions, fileOutputs, streamOutputs, segmentOutputs, imageOutputs } = this.getOutputParams(output, options);\n        const req = new _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.RoomCompositeEgressRequest({\n            roomName,\n            layout,\n            audioOnly,\n            videoOnly,\n            customBaseUrl,\n            output: legacyOutput,\n            options: egressOptions,\n            fileOutputs,\n            streamOutputs,\n            segmentOutputs,\n            imageOutputs\n        }).toJson();\n        const data = await this.rpc.request(svc, \"StartRoomCompositeEgress\", req, await this.authHeader({\n            roomRecord: true\n        }));\n        return _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.EgressInfo.fromJson(data, {\n            ignoreUnknownFields: true\n        });\n    }\n    /**\n   * @param url - url\n   * @param output - file or stream output\n   * @param opts - WebOptions\n   */ async startWebEgress(url, output, opts) {\n        const audioOnly = (opts == null ? void 0 : opts.audioOnly) || false;\n        const videoOnly = (opts == null ? void 0 : opts.videoOnly) || false;\n        const awaitStartSignal = (opts == null ? void 0 : opts.awaitStartSignal) || false;\n        const { output: legacyOutput, options, fileOutputs, streamOutputs, segmentOutputs, imageOutputs } = this.getOutputParams(output, opts == null ? void 0 : opts.encodingOptions);\n        const req = new _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.WebEgressRequest({\n            url,\n            audioOnly,\n            videoOnly,\n            awaitStartSignal,\n            output: legacyOutput,\n            options,\n            fileOutputs,\n            streamOutputs,\n            segmentOutputs,\n            imageOutputs\n        }).toJson();\n        const data = await this.rpc.request(svc, \"StartWebEgress\", req, await this.authHeader({\n            roomRecord: true\n        }));\n        return _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.EgressInfo.fromJson(data, {\n            ignoreUnknownFields: true\n        });\n    }\n    /**\n   * Export a participant's audio and video tracks,\n   *\n   * @param roomName - room name\n   * @param output - one or more outputs\n   * @param opts - ParticipantEgressOptions\n   */ async startParticipantEgress(roomName, identity, output, opts) {\n        const { options, fileOutputs, streamOutputs, segmentOutputs, imageOutputs } = this.getOutputParams(output, opts == null ? void 0 : opts.encodingOptions);\n        const req = new _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.ParticipantEgressRequest({\n            roomName,\n            identity,\n            screenShare: (opts == null ? void 0 : opts.screenShare) ?? false,\n            options,\n            fileOutputs,\n            streamOutputs,\n            segmentOutputs,\n            imageOutputs\n        }).toJson();\n        const data = await this.rpc.request(svc, \"StartParticipantEgress\", req, await this.authHeader({\n            roomRecord: true\n        }));\n        return _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.EgressInfo.fromJson(data, {\n            ignoreUnknownFields: true\n        });\n    }\n    async startTrackCompositeEgress(roomName, output, optsOrAudioTrackId, videoTrackId, options) {\n        let audioTrackId;\n        if (optsOrAudioTrackId !== void 0) {\n            if (typeof optsOrAudioTrackId === \"string\") {\n                audioTrackId = optsOrAudioTrackId;\n            } else {\n                const opts = optsOrAudioTrackId;\n                audioTrackId = opts.audioTrackId;\n                videoTrackId = opts.videoTrackId;\n                options = opts.encodingOptions;\n            }\n        }\n        audioTrackId ??= \"\";\n        videoTrackId ??= \"\";\n        const { output: legacyOutput, options: egressOptions, fileOutputs, streamOutputs, segmentOutputs, imageOutputs } = this.getOutputParams(output, options);\n        const req = new _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.TrackCompositeEgressRequest({\n            roomName,\n            audioTrackId,\n            videoTrackId,\n            output: legacyOutput,\n            options: egressOptions,\n            fileOutputs,\n            streamOutputs,\n            segmentOutputs,\n            imageOutputs\n        }).toJson();\n        const data = await this.rpc.request(svc, \"StartTrackCompositeEgress\", req, await this.authHeader({\n            roomRecord: true\n        }));\n        return _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.EgressInfo.fromJson(data, {\n            ignoreUnknownFields: true\n        });\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    isEncodedOutputs(output) {\n        return output.file !== void 0 || output.stream !== void 0 || output.segments !== void 0 || output.images !== void 0;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    isEncodedFileOutput(output) {\n        return output.filepath !== void 0 || output.fileType !== void 0;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    isSegmentedFileOutput(output) {\n        return output.filenamePrefix !== void 0 || output.playlistName !== void 0 || output.filenameSuffix !== void 0;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    isStreamOutput(output) {\n        return output.protocol !== void 0 || output.urls !== void 0;\n    }\n    getOutputParams(output, opts) {\n        let file;\n        let fileOutputs;\n        let stream;\n        let streamOutputs;\n        let segments;\n        let segmentOutputs;\n        let imageOutputs;\n        if (this.isEncodedOutputs(output)) {\n            if (output.file !== void 0) {\n                fileOutputs = [\n                    output.file\n                ];\n            }\n            if (output.stream !== void 0) {\n                streamOutputs = [\n                    output.stream\n                ];\n            }\n            if (output.segments !== void 0) {\n                segmentOutputs = [\n                    output.segments\n                ];\n            }\n            if (output.images !== void 0) {\n                imageOutputs = [\n                    output.images\n                ];\n            }\n        } else if (this.isEncodedFileOutput(output)) {\n            file = output;\n            fileOutputs = [\n                file\n            ];\n        } else if (this.isSegmentedFileOutput(output)) {\n            segments = output;\n            segmentOutputs = [\n                segments\n            ];\n        } else if (this.isStreamOutput(output)) {\n            stream = output;\n            streamOutputs = [\n                stream\n            ];\n        }\n        let legacyOutput;\n        if (file) {\n            legacyOutput = {\n                case: \"file\",\n                value: file\n            };\n        } else if (stream) {\n            legacyOutput = {\n                case: \"stream\",\n                value: stream\n            };\n        } else if (segments) {\n            legacyOutput = {\n                case: \"segments\",\n                value: segments\n            };\n        }\n        let egressOptions;\n        if (opts) {\n            if (typeof opts === \"number\") {\n                egressOptions = {\n                    case: \"preset\",\n                    value: opts\n                };\n            } else {\n                egressOptions = {\n                    case: \"advanced\",\n                    value: opts\n                };\n            }\n        }\n        return {\n            output: legacyOutput,\n            options: egressOptions,\n            fileOutputs,\n            streamOutputs,\n            segmentOutputs,\n            imageOutputs\n        };\n    }\n    /**\n   * @param roomName - room name\n   * @param output - file or websocket output\n   * @param trackId - track Id\n   */ async startTrackEgress(roomName, output, trackId) {\n        let legacyOutput;\n        if (typeof output === \"string\") {\n            legacyOutput = {\n                case: \"websocketUrl\",\n                value: output\n            };\n        } else {\n            legacyOutput = {\n                case: \"file\",\n                value: output\n            };\n        }\n        const req = new _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.TrackEgressRequest({\n            roomName,\n            trackId,\n            output: legacyOutput\n        }).toJson();\n        const data = await this.rpc.request(svc, \"StartTrackEgress\", req, await this.authHeader({\n            roomRecord: true\n        }));\n        return _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.EgressInfo.fromJson(data, {\n            ignoreUnknownFields: true\n        });\n    }\n    /**\n   * @param egressId -\n   * @param layout -\n   */ async updateLayout(egressId, layout) {\n        const data = await this.rpc.request(svc, \"UpdateLayout\", new _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.UpdateLayoutRequest({\n            egressId,\n            layout\n        }).toJson(), await this.authHeader({\n            roomRecord: true\n        }));\n        return _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.EgressInfo.fromJson(data, {\n            ignoreUnknownFields: true\n        });\n    }\n    /**\n   * @param egressId -\n   * @param addOutputUrls -\n   * @param removeOutputUrls -\n   */ async updateStream(egressId, addOutputUrls, removeOutputUrls) {\n        addOutputUrls ??= [];\n        removeOutputUrls ??= [];\n        const data = await this.rpc.request(svc, \"UpdateStream\", new _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.UpdateStreamRequest({\n            egressId,\n            addOutputUrls,\n            removeOutputUrls\n        }).toJson(), await this.authHeader({\n            roomRecord: true\n        }));\n        return _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.EgressInfo.fromJson(data, {\n            ignoreUnknownFields: true\n        });\n    }\n    /**\n   * @param roomName - list egress for one room only\n   */ async listEgress(options) {\n        let req = {};\n        if (typeof options === \"string\") {\n            req.roomName = options;\n        } else if (options !== void 0) {\n            req = options;\n        }\n        const data = await this.rpc.request(svc, \"ListEgress\", new _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.ListEgressRequest(req).toJson(), await this.authHeader({\n            roomRecord: true\n        }));\n        return _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.ListEgressResponse.fromJson(data, {\n            ignoreUnknownFields: true\n        }).items ?? [];\n    }\n    /**\n   * @param egressId -\n   */ async stopEgress(egressId) {\n        const data = await this.rpc.request(svc, \"StopEgress\", new _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.StopEgressRequest({\n            egressId\n        }).toJson(), await this.authHeader({\n            roomRecord: true\n        }));\n        return _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.EgressInfo.fromJson(data, {\n            ignoreUnknownFields: true\n        });\n    }\n}\n //# sourceMappingURL=EgressClient.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/livekit-server-sdk/dist/EgressClient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/livekit-server-sdk/dist/IngressClient.js":
/*!***************************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/IngressClient.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IngressClient: () => (/* binding */ IngressClient)\n/* harmony export */ });\n/* harmony import */ var _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @livekit/protocol */ \"(rsc)/./node_modules/@livekit/protocol/dist/index.mjs\");\n/* harmony import */ var _ServiceBase_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ServiceBase.js */ \"(rsc)/./node_modules/livekit-server-sdk/dist/ServiceBase.js\");\n/* harmony import */ var _TwirpRPC_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./TwirpRPC.js */ \"(rsc)/./node_modules/livekit-server-sdk/dist/TwirpRPC.js\");\n\n\n\nconst svc = \"Ingress\";\nclass IngressClient extends _ServiceBase_js__WEBPACK_IMPORTED_MODULE_1__.ServiceBase {\n    /**\n   * @param host - hostname including protocol. i.e. 'https://<project>.livekit.cloud'\n   * @param apiKey - API Key, can be set in env var LIVEKIT_API_KEY\n   * @param secret - API Secret, can be set in env var LIVEKIT_API_SECRET\n   */ constructor(host, apiKey, secret){\n        super(apiKey, secret);\n        this.rpc = new _TwirpRPC_js__WEBPACK_IMPORTED_MODULE_2__.TwirpRpc(host, _TwirpRPC_js__WEBPACK_IMPORTED_MODULE_2__.livekitPackage);\n    }\n    /**\n   * @param inputType - protocol for the ingress\n   * @param opts - CreateIngressOptions\n   */ async createIngress(inputType, opts) {\n        let name = \"\";\n        let participantName = \"\";\n        let participantIdentity = \"\";\n        let bypassTranscoding = false;\n        let url = \"\";\n        if (opts == null) {\n            throw new Error(\"options dictionary is required\");\n        }\n        const roomName = opts.roomName;\n        const enableTranscoding = opts.enableTranscoding;\n        const audio = opts.audio;\n        const video = opts.video;\n        const participantMetadata = opts.participantMetadata;\n        name = opts.name || \"\";\n        participantName = opts.participantName || \"\";\n        participantIdentity = opts.participantIdentity || \"\";\n        bypassTranscoding = opts.bypassTranscoding || false;\n        url = opts.url || \"\";\n        if (typeof roomName == \"undefined\") {\n            throw new Error(\"required roomName option not provided\");\n        }\n        if (participantIdentity == \"\") {\n            throw new Error(\"required participantIdentity option not provided\");\n        }\n        const req = new _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.CreateIngressRequest({\n            inputType,\n            name,\n            roomName,\n            participantIdentity,\n            participantMetadata,\n            participantName,\n            bypassTranscoding,\n            enableTranscoding,\n            url,\n            audio,\n            video\n        }).toJson();\n        const data = await this.rpc.request(svc, \"CreateIngress\", req, await this.authHeader({\n            ingressAdmin: true\n        }));\n        return _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.IngressInfo.fromJson(data, {\n            ignoreUnknownFields: true\n        });\n    }\n    /**\n   * @param ingressId - ID of the ingress to update\n   * @param opts - UpdateIngressOptions\n   */ async updateIngress(ingressId, opts) {\n        const name = opts.name || \"\";\n        const roomName = opts.roomName || \"\";\n        const participantName = opts.participantName || \"\";\n        const participantIdentity = opts.participantIdentity || \"\";\n        const { participantMetadata } = opts;\n        const { audio, video, bypassTranscoding, enableTranscoding } = opts;\n        const req = new _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.UpdateIngressRequest({\n            ingressId,\n            name,\n            roomName,\n            participantIdentity,\n            participantName,\n            participantMetadata,\n            bypassTranscoding,\n            enableTranscoding,\n            audio,\n            video\n        }).toJson();\n        const data = await this.rpc.request(svc, \"UpdateIngress\", req, await this.authHeader({\n            ingressAdmin: true\n        }));\n        return _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.IngressInfo.fromJson(data, {\n            ignoreUnknownFields: true\n        });\n    }\n    /**\n   * @param arg - list room name or options\n   */ async listIngress(arg) {\n        let req = {};\n        if (typeof arg === \"string\") {\n            req.roomName = arg;\n        } else if (arg) {\n            req = arg;\n        }\n        const data = await this.rpc.request(svc, \"ListIngress\", new _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.ListIngressRequest(req).toJson(), await this.authHeader({\n            ingressAdmin: true\n        }));\n        return _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.ListIngressResponse.fromJson(data, {\n            ignoreUnknownFields: true\n        }).items ?? [];\n    }\n    /**\n   * @param ingressId - ingress to delete\n   */ async deleteIngress(ingressId) {\n        const data = await this.rpc.request(svc, \"DeleteIngress\", new _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.DeleteIngressRequest({\n            ingressId\n        }).toJson(), await this.authHeader({\n            ingressAdmin: true\n        }));\n        return _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.IngressInfo.fromJson(data, {\n            ignoreUnknownFields: true\n        });\n    }\n}\n //# sourceMappingURL=IngressClient.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/livekit-server-sdk/dist/IngressClient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/livekit-server-sdk/dist/RoomServiceClient.js":
/*!*******************************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/RoomServiceClient.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RoomServiceClient: () => (/* binding */ RoomServiceClient)\n/* harmony export */ });\n/* harmony import */ var _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @livekit/protocol */ \"(rsc)/./node_modules/@livekit/protocol/dist/index.mjs\");\n/* harmony import */ var _ServiceBase_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ServiceBase.js */ \"(rsc)/./node_modules/livekit-server-sdk/dist/ServiceBase.js\");\n/* harmony import */ var _TwirpRPC_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./TwirpRPC.js */ \"(rsc)/./node_modules/livekit-server-sdk/dist/TwirpRPC.js\");\n/* harmony import */ var _crypto_uuid_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./crypto/uuid.js */ \"(rsc)/./node_modules/livekit-server-sdk/dist/crypto/uuid.js\");\n\n\n\n\nconst svc = \"RoomService\";\nclass RoomServiceClient extends _ServiceBase_js__WEBPACK_IMPORTED_MODULE_1__.ServiceBase {\n    /**\n   *\n   * @param host - hostname including protocol. i.e. 'https://<project>.livekit.cloud'\n   * @param apiKey - API Key, can be set in env var LIVEKIT_API_KEY\n   * @param secret - API Secret, can be set in env var LIVEKIT_API_SECRET\n   */ constructor(host, apiKey, secret){\n        super(apiKey, secret);\n        this.rpc = new _TwirpRPC_js__WEBPACK_IMPORTED_MODULE_2__.TwirpRpc(host, _TwirpRPC_js__WEBPACK_IMPORTED_MODULE_2__.livekitPackage);\n    }\n    /**\n   * Creates a new room. Explicit room creation is not required, since rooms will\n   * be automatically created when the first participant joins. This method can be\n   * used to customize room settings.\n   * @param options -\n   */ async createRoom(options) {\n        const data = await this.rpc.request(svc, \"CreateRoom\", new _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.CreateRoomRequest(options).toJson(), await this.authHeader({\n            roomCreate: true\n        }));\n        return _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.Room.fromJson(data, {\n            ignoreUnknownFields: true\n        });\n    }\n    /**\n   * List active rooms\n   * @param names - when undefined or empty, list all rooms.\n   *                otherwise returns rooms with matching names\n   * @returns\n   */ async listRooms(names) {\n        const data = await this.rpc.request(svc, \"ListRooms\", new _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.ListRoomsRequest({\n            names: names ?? []\n        }).toJson(), await this.authHeader({\n            roomList: true\n        }));\n        const res = _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.ListRoomsResponse.fromJson(data, {\n            ignoreUnknownFields: true\n        });\n        return res.rooms ?? [];\n    }\n    async deleteRoom(room) {\n        await this.rpc.request(svc, \"DeleteRoom\", new _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.DeleteRoomRequest({\n            room\n        }).toJson(), await this.authHeader({\n            roomCreate: true\n        }));\n    }\n    /**\n   * Update metadata of a room\n   * @param room - name of the room\n   * @param metadata - the new metadata for the room\n   */ async updateRoomMetadata(room, metadata) {\n        const data = await this.rpc.request(svc, \"UpdateRoomMetadata\", new _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.UpdateRoomMetadataRequest({\n            room,\n            metadata\n        }).toJson(), await this.authHeader({\n            roomAdmin: true,\n            room\n        }));\n        return _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.Room.fromJson(data, {\n            ignoreUnknownFields: true\n        });\n    }\n    /**\n   * List participants in a room\n   * @param room - name of the room\n   */ async listParticipants(room) {\n        const data = await this.rpc.request(svc, \"ListParticipants\", new _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.ListParticipantsRequest({\n            room\n        }).toJson(), await this.authHeader({\n            roomAdmin: true,\n            room\n        }));\n        const res = _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.ListParticipantsResponse.fromJson(data, {\n            ignoreUnknownFields: true\n        });\n        return res.participants ?? [];\n    }\n    /**\n   * Get information on a specific participant, including the tracks that participant\n   * has published\n   * @param room - name of the room\n   * @param identity - identity of the participant to return\n   */ async getParticipant(room, identity) {\n        const data = await this.rpc.request(svc, \"GetParticipant\", new _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.RoomParticipantIdentity({\n            room,\n            identity\n        }).toJson(), await this.authHeader({\n            roomAdmin: true,\n            room\n        }));\n        return _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.ParticipantInfo.fromJson(data, {\n            ignoreUnknownFields: true\n        });\n    }\n    /**\n   * Removes a participant in the room. This will disconnect the participant\n   * and will emit a Disconnected event for that participant.\n   * Even after being removed, the participant can still re-join the room.\n   * @param room -\n   * @param identity -\n   */ async removeParticipant(room, identity) {\n        await this.rpc.request(svc, \"RemoveParticipant\", new _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.RoomParticipantIdentity({\n            room,\n            identity\n        }).toJson(), await this.authHeader({\n            roomAdmin: true,\n            room\n        }));\n    }\n    /**\n   * Forwards a participant's track to another room. This will create a\n   * participant to join the destination room that has same information\n   * with the source participant except the kind to be `Forwarded`. All\n   * changes to the source participant will be reflected to the forwarded\n   * participant. When the source participant disconnects or the\n   * `RemoveParticipant` method is called in the destination room, the\n   * forwarding will be stopped.\n   */ async forwardParticipant(room, identity, destinationRoom) {\n        await this.rpc.request(svc, \"ForwardParticipant\", new _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.ForwardParticipantRequest({\n            room,\n            identity,\n            destinationRoom\n        }).toJson(), await this.authHeader({\n            roomAdmin: true,\n            room,\n            destinationRoom\n        }));\n    }\n    /**\n   * Mutes a track that the participant has published.\n   * @param room -\n   * @param identity -\n   * @param trackSid - sid of the track to be muted\n   * @param muted - true to mute, false to unmute\n   */ async mutePublishedTrack(room, identity, trackSid, muted) {\n        const req = new _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.MuteRoomTrackRequest({\n            room,\n            identity,\n            trackSid,\n            muted\n        }).toJson();\n        const data = await this.rpc.request(svc, \"MutePublishedTrack\", req, await this.authHeader({\n            roomAdmin: true,\n            room\n        }));\n        const res = _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.MuteRoomTrackResponse.fromJson(data, {\n            ignoreUnknownFields: true\n        });\n        return res.track;\n    }\n    async updateParticipant(room, identity, metadataOrOptions, maybePermission, maybeName) {\n        const hasOptions = typeof metadataOrOptions === \"object\";\n        const metadata = hasOptions ? metadataOrOptions == null ? void 0 : metadataOrOptions.metadata : metadataOrOptions;\n        const permission = hasOptions ? metadataOrOptions.permission : maybePermission;\n        const name = hasOptions ? metadataOrOptions.name : maybeName;\n        const attributes = hasOptions ? metadataOrOptions.attributes : {};\n        const req = new _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.UpdateParticipantRequest({\n            room,\n            identity,\n            attributes,\n            metadata,\n            name\n        });\n        if (permission) {\n            req.permission = new _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.ParticipantPermission(permission);\n        }\n        const data = await this.rpc.request(svc, \"UpdateParticipant\", req.toJson(), await this.authHeader({\n            roomAdmin: true,\n            room\n        }));\n        return _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.ParticipantInfo.fromJson(data, {\n            ignoreUnknownFields: true\n        });\n    }\n    /**\n   * Updates a participant's subscription to tracks\n   * @param room -\n   * @param identity -\n   * @param trackSids -\n   * @param subscribe - true to subscribe, false to unsubscribe\n   */ async updateSubscriptions(room, identity, trackSids, subscribe) {\n        const req = new _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.UpdateSubscriptionsRequest({\n            room,\n            identity,\n            trackSids,\n            subscribe,\n            participantTracks: []\n        }).toJson();\n        await this.rpc.request(svc, \"UpdateSubscriptions\", req, await this.authHeader({\n            roomAdmin: true,\n            room\n        }));\n    }\n    async sendData(room, data, kind, options = {}) {\n        const destinationSids = Array.isArray(options) ? options : options.destinationSids;\n        const topic = Array.isArray(options) ? void 0 : options.topic;\n        const req = new _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.SendDataRequest({\n            room,\n            data,\n            kind,\n            destinationSids: destinationSids ?? [],\n            topic\n        });\n        if (!Array.isArray(options) && options.destinationIdentities) {\n            req.destinationIdentities = options.destinationIdentities;\n        }\n        req.nonce = await (0,_crypto_uuid_js__WEBPACK_IMPORTED_MODULE_3__.getRandomBytes)(16);\n        await this.rpc.request(svc, \"SendData\", req.toJson(), await this.authHeader({\n            roomAdmin: true,\n            room\n        }));\n    }\n}\n //# sourceMappingURL=RoomServiceClient.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/livekit-server-sdk/dist/RoomServiceClient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/livekit-server-sdk/dist/ServiceBase.js":
/*!*************************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/ServiceBase.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ServiceBase: () => (/* binding */ ServiceBase)\n/* harmony export */ });\n/* harmony import */ var _AccessToken_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AccessToken.js */ \"(rsc)/./node_modules/livekit-server-sdk/dist/AccessToken.js\");\n\nclass ServiceBase {\n    /**\n   * @param apiKey - API Key.\n   * @param secret - API Secret.\n   * @param ttl - token TTL\n   */ constructor(apiKey, secret, ttl){\n        this.apiKey = apiKey;\n        this.secret = secret;\n        this.ttl = ttl || \"10m\";\n    }\n    async authHeader(grant, sip) {\n        const at = new _AccessToken_js__WEBPACK_IMPORTED_MODULE_0__.AccessToken(this.apiKey, this.secret, {\n            ttl: this.ttl\n        });\n        if (grant) {\n            at.addGrant(grant);\n        }\n        if (sip) {\n            at.addSIPGrant(sip);\n        }\n        return {\n            Authorization: `Bearer ${await at.toJwt()}`\n        };\n    }\n}\n //# sourceMappingURL=ServiceBase.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGl2ZWtpdC1zZXJ2ZXItc2RrL2Rpc3QvU2VydmljZUJhc2UuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBK0M7QUFDL0MsTUFBTUM7SUFDSjs7OztHQUlDLEdBQ0RDLFlBQVlDLE1BQU0sRUFBRUMsTUFBTSxFQUFFQyxHQUFHLENBQUU7UUFDL0IsSUFBSSxDQUFDRixNQUFNLEdBQUdBO1FBQ2QsSUFBSSxDQUFDQyxNQUFNLEdBQUdBO1FBQ2QsSUFBSSxDQUFDQyxHQUFHLEdBQUdBLE9BQU87SUFDcEI7SUFDQSxNQUFNQyxXQUFXQyxLQUFLLEVBQUVDLEdBQUcsRUFBRTtRQUMzQixNQUFNQyxLQUFLLElBQUlULHdEQUFXQSxDQUFDLElBQUksQ0FBQ0csTUFBTSxFQUFFLElBQUksQ0FBQ0MsTUFBTSxFQUFFO1lBQUVDLEtBQUssSUFBSSxDQUFDQSxHQUFHO1FBQUM7UUFDckUsSUFBSUUsT0FBTztZQUNURSxHQUFHQyxRQUFRLENBQUNIO1FBQ2Q7UUFDQSxJQUFJQyxLQUFLO1lBQ1BDLEdBQUdFLFdBQVcsQ0FBQ0g7UUFDakI7UUFDQSxPQUFPO1lBQ0xJLGVBQWUsQ0FBQyxPQUFPLEVBQUUsTUFBTUgsR0FBR0ksS0FBSyxHQUFHLENBQUM7UUFDN0M7SUFDRjtBQUNGO0FBR0UsQ0FDRix1Q0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbmltYS1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL2xpdmVraXQtc2VydmVyLXNkay9kaXN0L1NlcnZpY2VCYXNlLmpzP2VmN2IiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWNjZXNzVG9rZW4gfSBmcm9tIFwiLi9BY2Nlc3NUb2tlbi5qc1wiO1xuY2xhc3MgU2VydmljZUJhc2Uge1xuICAvKipcbiAgICogQHBhcmFtIGFwaUtleSAtIEFQSSBLZXkuXG4gICAqIEBwYXJhbSBzZWNyZXQgLSBBUEkgU2VjcmV0LlxuICAgKiBAcGFyYW0gdHRsIC0gdG9rZW4gVFRMXG4gICAqL1xuICBjb25zdHJ1Y3RvcihhcGlLZXksIHNlY3JldCwgdHRsKSB7XG4gICAgdGhpcy5hcGlLZXkgPSBhcGlLZXk7XG4gICAgdGhpcy5zZWNyZXQgPSBzZWNyZXQ7XG4gICAgdGhpcy50dGwgPSB0dGwgfHwgXCIxMG1cIjtcbiAgfVxuICBhc3luYyBhdXRoSGVhZGVyKGdyYW50LCBzaXApIHtcbiAgICBjb25zdCBhdCA9IG5ldyBBY2Nlc3NUb2tlbih0aGlzLmFwaUtleSwgdGhpcy5zZWNyZXQsIHsgdHRsOiB0aGlzLnR0bCB9KTtcbiAgICBpZiAoZ3JhbnQpIHtcbiAgICAgIGF0LmFkZEdyYW50KGdyYW50KTtcbiAgICB9XG4gICAgaWYgKHNpcCkge1xuICAgICAgYXQuYWRkU0lQR3JhbnQoc2lwKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIEF1dGhvcml6YXRpb246IGBCZWFyZXIgJHthd2FpdCBhdC50b0p3dCgpfWBcbiAgICB9O1xuICB9XG59XG5leHBvcnQge1xuICBTZXJ2aWNlQmFzZVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVNlcnZpY2VCYXNlLmpzLm1hcCJdLCJuYW1lcyI6WyJBY2Nlc3NUb2tlbiIsIlNlcnZpY2VCYXNlIiwiY29uc3RydWN0b3IiLCJhcGlLZXkiLCJzZWNyZXQiLCJ0dGwiLCJhdXRoSGVhZGVyIiwiZ3JhbnQiLCJzaXAiLCJhdCIsImFkZEdyYW50IiwiYWRkU0lQR3JhbnQiLCJBdXRob3JpemF0aW9uIiwidG9Kd3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/livekit-server-sdk/dist/ServiceBase.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/livekit-server-sdk/dist/SipClient.js":
/*!***********************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/SipClient.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SipClient: () => (/* binding */ SipClient)\n/* harmony export */ });\n/* harmony import */ var _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @bufbuild/protobuf */ \"(rsc)/./node_modules/@bufbuild/protobuf/dist/esm/google/protobuf/duration_pb.js\");\n/* harmony import */ var _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @livekit/protocol */ \"(rsc)/./node_modules/@livekit/protocol/dist/index.mjs\");\n/* harmony import */ var _ServiceBase_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ServiceBase.js */ \"(rsc)/./node_modules/livekit-server-sdk/dist/ServiceBase.js\");\n/* harmony import */ var _TwirpRPC_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./TwirpRPC.js */ \"(rsc)/./node_modules/livekit-server-sdk/dist/TwirpRPC.js\");\n\n\n\n\nconst svc = \"SIP\";\nclass SipClient extends _ServiceBase_js__WEBPACK_IMPORTED_MODULE_1__.ServiceBase {\n    /**\n   * @param host - hostname including protocol. i.e. 'https://<project>.livekit.cloud'\n   * @param apiKey - API Key, can be set in env var LIVEKIT_API_KEY\n   * @param secret - API Secret, can be set in env var LIVEKIT_API_SECRET\n   */ constructor(host, apiKey, secret){\n        super(apiKey, secret);\n        this.rpc = new _TwirpRPC_js__WEBPACK_IMPORTED_MODULE_2__.TwirpRpc(host, _TwirpRPC_js__WEBPACK_IMPORTED_MODULE_2__.livekitPackage);\n    }\n    /**\n   * @param number - phone number of the trunk\n   * @param opts - CreateSipTrunkOptions\n   * @deprecated use `createSipInboundTrunk` or `createSipOutboundTrunk`\n   */ async createSipTrunk(number, opts) {\n        let inboundAddresses;\n        let inboundNumbers;\n        let inboundUsername = \"\";\n        let inboundPassword = \"\";\n        let outboundAddress = \"\";\n        let outboundUsername = \"\";\n        let outboundPassword = \"\";\n        let name = \"\";\n        let metadata = \"\";\n        if (opts !== void 0) {\n            inboundAddresses = opts.inbound_addresses;\n            inboundNumbers = opts.inbound_numbers;\n            inboundUsername = opts.inbound_username || \"\";\n            inboundPassword = opts.inbound_password || \"\";\n            outboundAddress = opts.outbound_address || \"\";\n            outboundUsername = opts.outbound_username || \"\";\n            outboundPassword = opts.outbound_password || \"\";\n            name = opts.name || \"\";\n            metadata = opts.metadata || \"\";\n        }\n        const req = new _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.CreateSIPTrunkRequest({\n            name,\n            metadata,\n            inboundAddresses,\n            inboundNumbers,\n            inboundUsername,\n            inboundPassword,\n            outboundNumber: number,\n            outboundAddress,\n            outboundUsername,\n            outboundPassword\n        }).toJson();\n        const data = await this.rpc.request(svc, \"CreateSIPTrunk\", req, await this.authHeader({}, {\n            admin: true\n        }));\n        return _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.SIPTrunkInfo.fromJson(data, {\n            ignoreUnknownFields: true\n        });\n    }\n    /**\n   * @param name - human-readable name of the trunk\n   * @param numbers - phone numbers of the trunk\n   * @param opts - CreateSipTrunkOptions\n   */ async createSipInboundTrunk(name, numbers, opts) {\n        if (opts === void 0) {\n            opts = {};\n        }\n        const req = new _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.CreateSIPInboundTrunkRequest({\n            trunk: new _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.SIPInboundTrunkInfo({\n                name,\n                numbers,\n                metadata: opts == null ? void 0 : opts.metadata,\n                allowedAddresses: opts.allowedAddresses ?? opts.allowed_addresses,\n                allowedNumbers: opts.allowedNumbers ?? opts.allowed_numbers,\n                authUsername: opts.authUsername ?? opts.auth_username,\n                authPassword: opts.authPassword ?? opts.auth_password,\n                headers: opts.headers,\n                headersToAttributes: opts.headersToAttributes,\n                includeHeaders: opts.includeHeaders,\n                krispEnabled: opts.krispEnabled\n            })\n        }).toJson();\n        const data = await this.rpc.request(svc, \"CreateSIPInboundTrunk\", req, await this.authHeader({}, {\n            admin: true\n        }));\n        return _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.SIPInboundTrunkInfo.fromJson(data, {\n            ignoreUnknownFields: true\n        });\n    }\n    /**\n   * @param name - human-readable name of the trunk\n   * @param address - hostname and port of the SIP server to dial\n   * @param numbers - phone numbers of the trunk\n   * @param opts - CreateSipTrunkOptions\n   */ async createSipOutboundTrunk(name, address, numbers, opts) {\n        if (opts === void 0) {\n            opts = {\n                transport: _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.SIPTransport.SIP_TRANSPORT_AUTO\n            };\n        }\n        const req = new _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.CreateSIPOutboundTrunkRequest({\n            trunk: new _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.SIPOutboundTrunkInfo({\n                name,\n                address,\n                numbers,\n                metadata: opts.metadata,\n                transport: opts.transport,\n                authUsername: opts.authUsername ?? opts.auth_username,\n                authPassword: opts.authPassword ?? opts.auth_password,\n                headers: opts.headers,\n                headersToAttributes: opts.headersToAttributes,\n                includeHeaders: opts.includeHeaders\n            })\n        }).toJson();\n        const data = await this.rpc.request(svc, \"CreateSIPOutboundTrunk\", req, await this.authHeader({}, {\n            admin: true\n        }));\n        return _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.SIPOutboundTrunkInfo.fromJson(data, {\n            ignoreUnknownFields: true\n        });\n    }\n    /**\n   * @deprecated use `listSipInboundTrunk` or `listSipOutboundTrunk`\n   */ async listSipTrunk() {\n        const req = {};\n        const data = await this.rpc.request(svc, \"ListSIPTrunk\", new _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.ListSIPTrunkRequest(req).toJson(), await this.authHeader({}, {\n            admin: true\n        }));\n        return _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.ListSIPTrunkResponse.fromJson(data, {\n            ignoreUnknownFields: true\n        }).items ?? [];\n    }\n    async listSipInboundTrunk() {\n        const req = {};\n        const data = await this.rpc.request(svc, \"ListSIPInboundTrunk\", new _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.ListSIPInboundTrunkRequest(req).toJson(), await this.authHeader({}, {\n            admin: true\n        }));\n        return _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.ListSIPInboundTrunkResponse.fromJson(data, {\n            ignoreUnknownFields: true\n        }).items ?? [];\n    }\n    async listSipOutboundTrunk() {\n        const req = {};\n        const data = await this.rpc.request(svc, \"ListSIPOutboundTrunk\", new _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.ListSIPOutboundTrunkRequest(req).toJson(), await this.authHeader({}, {\n            admin: true\n        }));\n        return _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.ListSIPOutboundTrunkResponse.fromJson(data, {\n            ignoreUnknownFields: true\n        }).items ?? [];\n    }\n    /**\n   * @param sipTrunkId - sip trunk to delete\n   */ async deleteSipTrunk(sipTrunkId) {\n        const data = await this.rpc.request(svc, \"DeleteSIPTrunk\", new _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.DeleteSIPTrunkRequest({\n            sipTrunkId\n        }).toJson(), await this.authHeader({}, {\n            admin: true\n        }));\n        return _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.SIPTrunkInfo.fromJson(data, {\n            ignoreUnknownFields: true\n        });\n    }\n    /**\n   * @param rule - sip dispatch rule\n   * @param opts - CreateSipDispatchRuleOptions\n   */ async createSipDispatchRule(rule, opts) {\n        if (opts === void 0) {\n            opts = {};\n        }\n        let ruleProto = void 0;\n        if (rule.type == \"direct\") {\n            ruleProto = new _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.SIPDispatchRule({\n                rule: {\n                    case: \"dispatchRuleDirect\",\n                    value: new _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.SIPDispatchRuleDirect({\n                        roomName: rule.roomName,\n                        pin: rule.pin || \"\"\n                    })\n                }\n            });\n        } else if (rule.type == \"individual\") {\n            ruleProto = new _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.SIPDispatchRule({\n                rule: {\n                    case: \"dispatchRuleIndividual\",\n                    value: new _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.SIPDispatchRuleIndividual({\n                        roomPrefix: rule.roomPrefix,\n                        pin: rule.pin || \"\"\n                    })\n                }\n            });\n        }\n        const req = new _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.CreateSIPDispatchRuleRequest({\n            rule: ruleProto,\n            trunkIds: opts.trunkIds,\n            hidePhoneNumber: opts.hidePhoneNumber,\n            name: opts.name,\n            metadata: opts.metadata,\n            attributes: opts.attributes,\n            roomPreset: opts.roomPreset,\n            roomConfig: opts.roomConfig\n        }).toJson();\n        const data = await this.rpc.request(svc, \"CreateSIPDispatchRule\", req, await this.authHeader({}, {\n            admin: true\n        }));\n        return _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.SIPDispatchRuleInfo.fromJson(data, {\n            ignoreUnknownFields: true\n        });\n    }\n    async listSipDispatchRule() {\n        const req = {};\n        const data = await this.rpc.request(svc, \"ListSIPDispatchRule\", new _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.ListSIPDispatchRuleRequest(req).toJson(), await this.authHeader({}, {\n            admin: true\n        }));\n        return _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.ListSIPDispatchRuleResponse.fromJson(data, {\n            ignoreUnknownFields: true\n        }).items ?? [];\n    }\n    /**\n   * @param sipDispatchRuleId - sip trunk to delete\n   */ async deleteSipDispatchRule(sipDispatchRuleId) {\n        const data = await this.rpc.request(svc, \"DeleteSIPDispatchRule\", new _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.DeleteSIPDispatchRuleRequest({\n            sipDispatchRuleId\n        }).toJson(), await this.authHeader({}, {\n            admin: true\n        }));\n        return _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.SIPDispatchRuleInfo.fromJson(data, {\n            ignoreUnknownFields: true\n        });\n    }\n    /**\n   * @param sipTrunkId - sip trunk to use for the call\n   * @param number - number to dial\n   * @param roomName - room to attach the call to\n   * @param opts - CreateSipParticipantOptions\n   */ async createSipParticipant(sipTrunkId, number, roomName, opts) {\n        if (opts === void 0) {\n            opts = {};\n        }\n        const req = new _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.CreateSIPParticipantRequest({\n            sipTrunkId,\n            sipCallTo: number,\n            sipNumber: opts.fromNumber,\n            roomName,\n            participantIdentity: opts.participantIdentity || \"sip-participant\",\n            participantName: opts.participantName,\n            participantMetadata: opts.participantMetadata,\n            participantAttributes: opts.participantAttributes,\n            dtmf: opts.dtmf,\n            playDialtone: opts.playDialtone ?? opts.playRingtone,\n            headers: opts.headers,\n            hidePhoneNumber: opts.hidePhoneNumber,\n            includeHeaders: opts.includeHeaders,\n            ringingTimeout: opts.ringingTimeout ? new _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_3__.Duration({\n                seconds: BigInt(opts.ringingTimeout)\n            }) : void 0,\n            maxCallDuration: opts.maxCallDuration ? new _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_3__.Duration({\n                seconds: BigInt(opts.maxCallDuration)\n            }) : void 0,\n            krispEnabled: opts.krispEnabled\n        }).toJson();\n        const data = await this.rpc.request(svc, \"CreateSIPParticipant\", req, await this.authHeader({}, {\n            call: true\n        }));\n        return _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.SIPParticipantInfo.fromJson(data, {\n            ignoreUnknownFields: true\n        });\n    }\n    /**\n   * @param roomName - room the SIP participant to transfer is connectd to\n   * @param participantIdentity - identity of the SIP participant to transfer\n   * @param transferTo - SIP URL to transfer the participant to\n   */ async transferSipParticipant(roomName, participantIdentity, transferTo, opts) {\n        if (opts === void 0) {\n            opts = {};\n        }\n        const req = new _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.TransferSIPParticipantRequest({\n            participantIdentity,\n            roomName,\n            transferTo,\n            playDialtone: opts.playDialtone,\n            headers: opts.headers\n        }).toJson();\n        await this.rpc.request(svc, \"TransferSIPParticipant\", req, await this.authHeader({\n            roomAdmin: true,\n            room: roomName\n        }, {\n            call: true\n        }));\n    }\n}\n //# sourceMappingURL=SipClient.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/livekit-server-sdk/dist/SipClient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/livekit-server-sdk/dist/TwirpRPC.js":
/*!**********************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/TwirpRPC.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TwirpError: () => (/* binding */ TwirpError),\n/* harmony export */   TwirpRpc: () => (/* binding */ TwirpRpc),\n/* harmony export */   livekitPackage: () => (/* binding */ livekitPackage)\n/* harmony export */ });\nconst defaultPrefix = \"/twirp\";\nconst livekitPackage = \"livekit\";\nclass TwirpError extends Error {\n    constructor(name, message, status, code){\n        super(message);\n        this.name = name;\n        this.status = status;\n        this.code = code;\n    }\n}\nclass TwirpRpc {\n    constructor(host, pkg, prefix){\n        if (host.startsWith(\"ws\")) {\n            host = host.replace(\"ws\", \"http\");\n        }\n        this.host = host;\n        this.pkg = pkg;\n        this.prefix = prefix || defaultPrefix;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async request(service, method, data, headers) {\n        const path = `${this.prefix}/${this.pkg}.${service}/${method}`;\n        const url = new URL(path, this.host);\n        const response = await fetch(url, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json;charset=UTF-8\",\n                ...headers\n            },\n            body: JSON.stringify(data)\n        });\n        if (!response.ok) {\n            const isJson = response.headers.get(\"content-type\") === \"application/json\";\n            let errorMessage = \"Unknown internal error\";\n            let errorCode = void 0;\n            try {\n                if (isJson) {\n                    const parsedError = await response.json();\n                    if (\"msg\" in parsedError) {\n                        errorMessage = parsedError.msg;\n                    }\n                    if (\"code\" in parsedError) {\n                        errorCode = parsedError.code;\n                    }\n                } else {\n                    errorMessage = await response.text();\n                }\n            } catch (e) {\n                console.debug(`Error when trying to parse error message, using defaults`, e);\n            }\n            throw new TwirpError(response.statusText, errorMessage, response.status, errorCode);\n        }\n        const parsedResp = await response.json();\n        const camelcaseKeys = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/quick-lru\"), __webpack_require__.e(\"vendor-chunks/map-obj\"), __webpack_require__.e(\"vendor-chunks/camelcase\"), __webpack_require__.e(\"vendor-chunks/camelcase-keys\")]).then(__webpack_require__.bind(__webpack_require__, /*! camelcase-keys */ \"(rsc)/./node_modules/camelcase-keys/index.js\")).then((mod)=>mod.default);\n        return camelcaseKeys(parsedResp, {\n            deep: true\n        });\n    }\n}\n //# sourceMappingURL=TwirpRPC.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGl2ZWtpdC1zZXJ2ZXItc2RrL2Rpc3QvVHdpcnBSUEMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsTUFBTUEsZ0JBQWdCO0FBQ3RCLE1BQU1DLGlCQUFpQjtBQUN2QixNQUFNQyxtQkFBbUJDO0lBQ3ZCQyxZQUFZQyxJQUFJLEVBQUVDLE9BQU8sRUFBRUMsTUFBTSxFQUFFQyxJQUFJLENBQUU7UUFDdkMsS0FBSyxDQUFDRjtRQUNOLElBQUksQ0FBQ0QsSUFBSSxHQUFHQTtRQUNaLElBQUksQ0FBQ0UsTUFBTSxHQUFHQTtRQUNkLElBQUksQ0FBQ0MsSUFBSSxHQUFHQTtJQUNkO0FBQ0Y7QUFDQSxNQUFNQztJQUNKTCxZQUFZTSxJQUFJLEVBQUVDLEdBQUcsRUFBRUMsTUFBTSxDQUFFO1FBQzdCLElBQUlGLEtBQUtHLFVBQVUsQ0FBQyxPQUFPO1lBQ3pCSCxPQUFPQSxLQUFLSSxPQUFPLENBQUMsTUFBTTtRQUM1QjtRQUNBLElBQUksQ0FBQ0osSUFBSSxHQUFHQTtRQUNaLElBQUksQ0FBQ0MsR0FBRyxHQUFHQTtRQUNYLElBQUksQ0FBQ0MsTUFBTSxHQUFHQSxVQUFVWjtJQUMxQjtJQUNBLDhEQUE4RDtJQUM5RCxNQUFNZSxRQUFRQyxPQUFPLEVBQUVDLE1BQU0sRUFBRUMsSUFBSSxFQUFFQyxPQUFPLEVBQUU7UUFDNUMsTUFBTUMsT0FBTyxDQUFDLEVBQUUsSUFBSSxDQUFDUixNQUFNLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQ0QsR0FBRyxDQUFDLENBQUMsRUFBRUssUUFBUSxDQUFDLEVBQUVDLE9BQU8sQ0FBQztRQUM5RCxNQUFNSSxNQUFNLElBQUlDLElBQUlGLE1BQU0sSUFBSSxDQUFDVixJQUFJO1FBQ25DLE1BQU1hLFdBQVcsTUFBTUMsTUFBTUgsS0FBSztZQUNoQ0osUUFBUTtZQUNSRSxTQUFTO2dCQUNQLGdCQUFnQjtnQkFDaEIsR0FBR0EsT0FBTztZQUNaO1lBQ0FNLE1BQU1DLEtBQUtDLFNBQVMsQ0FBQ1Q7UUFDdkI7UUFDQSxJQUFJLENBQUNLLFNBQVNLLEVBQUUsRUFBRTtZQUNoQixNQUFNQyxTQUFTTixTQUFTSixPQUFPLENBQUNXLEdBQUcsQ0FBQyxvQkFBb0I7WUFDeEQsSUFBSUMsZUFBZTtZQUNuQixJQUFJQyxZQUFZLEtBQUs7WUFDckIsSUFBSTtnQkFDRixJQUFJSCxRQUFRO29CQUNWLE1BQU1JLGNBQWMsTUFBTVYsU0FBU1csSUFBSTtvQkFDdkMsSUFBSSxTQUFTRCxhQUFhO3dCQUN4QkYsZUFBZUUsWUFBWUUsR0FBRztvQkFDaEM7b0JBQ0EsSUFBSSxVQUFVRixhQUFhO3dCQUN6QkQsWUFBWUMsWUFBWXpCLElBQUk7b0JBQzlCO2dCQUNGLE9BQU87b0JBQ0x1QixlQUFlLE1BQU1SLFNBQVNhLElBQUk7Z0JBQ3BDO1lBQ0YsRUFBRSxPQUFPQyxHQUFHO2dCQUNWQyxRQUFRQyxLQUFLLENBQUMsQ0FBQyx3REFBd0QsQ0FBQyxFQUFFRjtZQUM1RTtZQUNBLE1BQU0sSUFBSW5DLFdBQVdxQixTQUFTaUIsVUFBVSxFQUFFVCxjQUFjUixTQUFTaEIsTUFBTSxFQUFFeUI7UUFDM0U7UUFDQSxNQUFNUyxhQUFhLE1BQU1sQixTQUFTVyxJQUFJO1FBQ3RDLE1BQU1RLGdCQUFnQixNQUFNLGlXQUF3QixDQUFDQyxJQUFJLENBQUMsQ0FBQ0MsTUFBUUEsSUFBSUMsT0FBTztRQUM5RSxPQUFPSCxjQUFjRCxZQUFZO1lBQUVLLE1BQU07UUFBSztJQUNoRDtBQUNGO0FBS0UsQ0FDRixvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbmltYS1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL2xpdmVraXQtc2VydmVyLXNkay9kaXN0L1R3aXJwUlBDLmpzP2Q2NTYiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZGVmYXVsdFByZWZpeCA9IFwiL3R3aXJwXCI7XG5jb25zdCBsaXZla2l0UGFja2FnZSA9IFwibGl2ZWtpdFwiO1xuY2xhc3MgVHdpcnBFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IobmFtZSwgbWVzc2FnZSwgc3RhdHVzLCBjb2RlKSB7XG4gICAgc3VwZXIobWVzc2FnZSk7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLnN0YXR1cyA9IHN0YXR1cztcbiAgICB0aGlzLmNvZGUgPSBjb2RlO1xuICB9XG59XG5jbGFzcyBUd2lycFJwYyB7XG4gIGNvbnN0cnVjdG9yKGhvc3QsIHBrZywgcHJlZml4KSB7XG4gICAgaWYgKGhvc3Quc3RhcnRzV2l0aChcIndzXCIpKSB7XG4gICAgICBob3N0ID0gaG9zdC5yZXBsYWNlKFwid3NcIiwgXCJodHRwXCIpO1xuICAgIH1cbiAgICB0aGlzLmhvc3QgPSBob3N0O1xuICAgIHRoaXMucGtnID0gcGtnO1xuICAgIHRoaXMucHJlZml4ID0gcHJlZml4IHx8IGRlZmF1bHRQcmVmaXg7XG4gIH1cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgYXN5bmMgcmVxdWVzdChzZXJ2aWNlLCBtZXRob2QsIGRhdGEsIGhlYWRlcnMpIHtcbiAgICBjb25zdCBwYXRoID0gYCR7dGhpcy5wcmVmaXh9LyR7dGhpcy5wa2d9LiR7c2VydmljZX0vJHttZXRob2R9YDtcbiAgICBjb25zdCB1cmwgPSBuZXcgVVJMKHBhdGgsIHRoaXMuaG9zdCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwsIHtcbiAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04XCIsXG4gICAgICAgIC4uLmhlYWRlcnNcbiAgICAgIH0sXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShkYXRhKVxuICAgIH0pO1xuICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgIGNvbnN0IGlzSnNvbiA9IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KFwiY29udGVudC10eXBlXCIpID09PSBcImFwcGxpY2F0aW9uL2pzb25cIjtcbiAgICAgIGxldCBlcnJvck1lc3NhZ2UgPSBcIlVua25vd24gaW50ZXJuYWwgZXJyb3JcIjtcbiAgICAgIGxldCBlcnJvckNvZGUgPSB2b2lkIDA7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoaXNKc29uKSB7XG4gICAgICAgICAgY29uc3QgcGFyc2VkRXJyb3IgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICAgICAgaWYgKFwibXNnXCIgaW4gcGFyc2VkRXJyb3IpIHtcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9IHBhcnNlZEVycm9yLm1zZztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKFwiY29kZVwiIGluIHBhcnNlZEVycm9yKSB7XG4gICAgICAgICAgICBlcnJvckNvZGUgPSBwYXJzZWRFcnJvci5jb2RlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlcnJvck1lc3NhZ2UgPSBhd2FpdCByZXNwb25zZS50ZXh0KCk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc29sZS5kZWJ1ZyhgRXJyb3Igd2hlbiB0cnlpbmcgdG8gcGFyc2UgZXJyb3IgbWVzc2FnZSwgdXNpbmcgZGVmYXVsdHNgLCBlKTtcbiAgICAgIH1cbiAgICAgIHRocm93IG5ldyBUd2lycEVycm9yKHJlc3BvbnNlLnN0YXR1c1RleHQsIGVycm9yTWVzc2FnZSwgcmVzcG9uc2Uuc3RhdHVzLCBlcnJvckNvZGUpO1xuICAgIH1cbiAgICBjb25zdCBwYXJzZWRSZXNwID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgIGNvbnN0IGNhbWVsY2FzZUtleXMgPSBhd2FpdCBpbXBvcnQoXCJjYW1lbGNhc2Uta2V5c1wiKS50aGVuKChtb2QpID0+IG1vZC5kZWZhdWx0KTtcbiAgICByZXR1cm4gY2FtZWxjYXNlS2V5cyhwYXJzZWRSZXNwLCB7IGRlZXA6IHRydWUgfSk7XG4gIH1cbn1cbmV4cG9ydCB7XG4gIFR3aXJwRXJyb3IsXG4gIFR3aXJwUnBjLFxuICBsaXZla2l0UGFja2FnZVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVR3aXJwUlBDLmpzLm1hcCJdLCJuYW1lcyI6WyJkZWZhdWx0UHJlZml4IiwibGl2ZWtpdFBhY2thZ2UiLCJUd2lycEVycm9yIiwiRXJyb3IiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJtZXNzYWdlIiwic3RhdHVzIiwiY29kZSIsIlR3aXJwUnBjIiwiaG9zdCIsInBrZyIsInByZWZpeCIsInN0YXJ0c1dpdGgiLCJyZXBsYWNlIiwicmVxdWVzdCIsInNlcnZpY2UiLCJtZXRob2QiLCJkYXRhIiwiaGVhZGVycyIsInBhdGgiLCJ1cmwiLCJVUkwiLCJyZXNwb25zZSIsImZldGNoIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJvayIsImlzSnNvbiIsImdldCIsImVycm9yTWVzc2FnZSIsImVycm9yQ29kZSIsInBhcnNlZEVycm9yIiwianNvbiIsIm1zZyIsInRleHQiLCJlIiwiY29uc29sZSIsImRlYnVnIiwic3RhdHVzVGV4dCIsInBhcnNlZFJlc3AiLCJjYW1lbGNhc2VLZXlzIiwidGhlbiIsIm1vZCIsImRlZmF1bHQiLCJkZWVwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/livekit-server-sdk/dist/TwirpRPC.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/livekit-server-sdk/dist/WebhookReceiver.js":
/*!*****************************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/WebhookReceiver.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WebhookEvent: () => (/* binding */ WebhookEvent),\n/* harmony export */   WebhookReceiver: () => (/* binding */ WebhookReceiver),\n/* harmony export */   authorizeHeader: () => (/* binding */ authorizeHeader)\n/* harmony export */ });\n/* harmony import */ var _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @livekit/protocol */ \"(rsc)/./node_modules/@livekit/protocol/dist/index.mjs\");\n/* harmony import */ var _AccessToken_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AccessToken.js */ \"(rsc)/./node_modules/livekit-server-sdk/dist/AccessToken.js\");\n/* harmony import */ var _crypto_digest_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./crypto/digest.js */ \"(rsc)/./node_modules/livekit-server-sdk/dist/crypto/digest.js\");\n\n\n\nconst authorizeHeader = \"Authorize\";\nclass WebhookEvent extends _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.WebhookEvent {\n    constructor(){\n        super(...arguments);\n        this.event = \"\";\n    }\n    static fromBinary(bytes, options) {\n        return new WebhookEvent().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new WebhookEvent().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new WebhookEvent().fromJsonString(jsonString, options);\n    }\n}\nclass WebhookReceiver {\n    constructor(apiKey, apiSecret){\n        this.verifier = new _AccessToken_js__WEBPACK_IMPORTED_MODULE_1__.TokenVerifier(apiKey, apiSecret);\n    }\n    /**\n   * @param body - string of the posted body\n   * @param authHeader - `Authorization` header from the request\n   * @param skipAuth - true to skip auth validation\n   * @param clockTolerance - How much tolerance to allow for checks against the auth header to be skewed from the claims\n   * @returns The processed webhook event\n   */ async receive(body, authHeader, skipAuth = false, clockTolerance) {\n        if (!skipAuth) {\n            if (!authHeader) {\n                throw new Error(\"authorization header is empty\");\n            }\n            const claims = await this.verifier.verify(authHeader, clockTolerance);\n            const hash = await (0,_crypto_digest_js__WEBPACK_IMPORTED_MODULE_2__.digest)(body);\n            const hashDecoded = btoa(Array.from(new Uint8Array(hash)).map((v)=>String.fromCharCode(v)).join(\"\"));\n            if (claims.sha256 !== hashDecoded) {\n                throw new Error(\"sha256 checksum of body does not match\");\n            }\n        }\n        return WebhookEvent.fromJson(JSON.parse(body), {\n            ignoreUnknownFields: true\n        });\n    }\n}\n //# sourceMappingURL=WebhookReceiver.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGl2ZWtpdC1zZXJ2ZXItc2RrL2Rpc3QvV2ViaG9va1JlY2VpdmVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFzRTtBQUNyQjtBQUNMO0FBQzVDLE1BQU1JLGtCQUFrQjtBQUN4QixNQUFNSixxQkFBcUJDLDJEQUFpQkE7SUFDMUNJLGFBQWM7UUFDWixLQUFLLElBQUlDO1FBQ1QsSUFBSSxDQUFDQyxLQUFLLEdBQUc7SUFDZjtJQUNBLE9BQU9DLFdBQVdDLEtBQUssRUFBRUMsT0FBTyxFQUFFO1FBQ2hDLE9BQU8sSUFBSVYsZUFBZVEsVUFBVSxDQUFDQyxPQUFPQztJQUM5QztJQUNBLE9BQU9DLFNBQVNDLFNBQVMsRUFBRUYsT0FBTyxFQUFFO1FBQ2xDLE9BQU8sSUFBSVYsZUFBZVcsUUFBUSxDQUFDQyxXQUFXRjtJQUNoRDtJQUNBLE9BQU9HLGVBQWVDLFVBQVUsRUFBRUosT0FBTyxFQUFFO1FBQ3pDLE9BQU8sSUFBSVYsZUFBZWEsY0FBYyxDQUFDQyxZQUFZSjtJQUN2RDtBQUNGO0FBQ0EsTUFBTUs7SUFDSlYsWUFBWVcsTUFBTSxFQUFFQyxTQUFTLENBQUU7UUFDN0IsSUFBSSxDQUFDQyxRQUFRLEdBQUcsSUFBSWhCLDBEQUFhQSxDQUFDYyxRQUFRQztJQUM1QztJQUNBOzs7Ozs7R0FNQyxHQUNELE1BQU1FLFFBQVFDLElBQUksRUFBRUMsVUFBVSxFQUFFQyxXQUFXLEtBQUssRUFBRUMsY0FBYyxFQUFFO1FBQ2hFLElBQUksQ0FBQ0QsVUFBVTtZQUNiLElBQUksQ0FBQ0QsWUFBWTtnQkFDZixNQUFNLElBQUlHLE1BQU07WUFDbEI7WUFDQSxNQUFNQyxTQUFTLE1BQU0sSUFBSSxDQUFDUCxRQUFRLENBQUNRLE1BQU0sQ0FBQ0wsWUFBWUU7WUFDdEQsTUFBTUksT0FBTyxNQUFNeEIseURBQU1BLENBQUNpQjtZQUMxQixNQUFNUSxjQUFjQyxLQUNsQkMsTUFBTUMsSUFBSSxDQUFDLElBQUlDLFdBQVdMLE9BQU9NLEdBQUcsQ0FBQyxDQUFDQyxJQUFNQyxPQUFPQyxZQUFZLENBQUNGLElBQUlHLElBQUksQ0FBQztZQUUzRSxJQUFJWixPQUFPYSxNQUFNLEtBQUtWLGFBQWE7Z0JBQ2pDLE1BQU0sSUFBSUosTUFBTTtZQUNsQjtRQUNGO1FBQ0EsT0FBT3hCLGFBQWFXLFFBQVEsQ0FBQzRCLEtBQUtDLEtBQUssQ0FBQ3BCLE9BQU87WUFBRXFCLHFCQUFxQjtRQUFLO0lBQzdFO0FBQ0Y7QUFLRSxDQUNGLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL2FuaW1hLXByb2plY3QvLi9ub2RlX21vZHVsZXMvbGl2ZWtpdC1zZXJ2ZXItc2RrL2Rpc3QvV2ViaG9va1JlY2VpdmVyLmpzPzcyMjUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgV2ViaG9va0V2ZW50IGFzIFByb3RvV2ViaG9va0V2ZW50IH0gZnJvbSBcIkBsaXZla2l0L3Byb3RvY29sXCI7XG5pbXBvcnQgeyBUb2tlblZlcmlmaWVyIH0gZnJvbSBcIi4vQWNjZXNzVG9rZW4uanNcIjtcbmltcG9ydCB7IGRpZ2VzdCB9IGZyb20gXCIuL2NyeXB0by9kaWdlc3QuanNcIjtcbmNvbnN0IGF1dGhvcml6ZUhlYWRlciA9IFwiQXV0aG9yaXplXCI7XG5jbGFzcyBXZWJob29rRXZlbnQgZXh0ZW5kcyBQcm90b1dlYmhvb2tFdmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgdGhpcy5ldmVudCA9IFwiXCI7XG4gIH1cbiAgc3RhdGljIGZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gbmV3IFdlYmhvb2tFdmVudCgpLmZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpO1xuICB9XG4gIHN0YXRpYyBmcm9tSnNvbihqc29uVmFsdWUsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gbmV3IFdlYmhvb2tFdmVudCgpLmZyb21Kc29uKGpzb25WYWx1ZSwgb3B0aW9ucyk7XG4gIH1cbiAgc3RhdGljIGZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmcsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gbmV3IFdlYmhvb2tFdmVudCgpLmZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmcsIG9wdGlvbnMpO1xuICB9XG59XG5jbGFzcyBXZWJob29rUmVjZWl2ZXIge1xuICBjb25zdHJ1Y3RvcihhcGlLZXksIGFwaVNlY3JldCkge1xuICAgIHRoaXMudmVyaWZpZXIgPSBuZXcgVG9rZW5WZXJpZmllcihhcGlLZXksIGFwaVNlY3JldCk7XG4gIH1cbiAgLyoqXG4gICAqIEBwYXJhbSBib2R5IC0gc3RyaW5nIG9mIHRoZSBwb3N0ZWQgYm9keVxuICAgKiBAcGFyYW0gYXV0aEhlYWRlciAtIGBBdXRob3JpemF0aW9uYCBoZWFkZXIgZnJvbSB0aGUgcmVxdWVzdFxuICAgKiBAcGFyYW0gc2tpcEF1dGggLSB0cnVlIHRvIHNraXAgYXV0aCB2YWxpZGF0aW9uXG4gICAqIEBwYXJhbSBjbG9ja1RvbGVyYW5jZSAtIEhvdyBtdWNoIHRvbGVyYW5jZSB0byBhbGxvdyBmb3IgY2hlY2tzIGFnYWluc3QgdGhlIGF1dGggaGVhZGVyIHRvIGJlIHNrZXdlZCBmcm9tIHRoZSBjbGFpbXNcbiAgICogQHJldHVybnMgVGhlIHByb2Nlc3NlZCB3ZWJob29rIGV2ZW50XG4gICAqL1xuICBhc3luYyByZWNlaXZlKGJvZHksIGF1dGhIZWFkZXIsIHNraXBBdXRoID0gZmFsc2UsIGNsb2NrVG9sZXJhbmNlKSB7XG4gICAgaWYgKCFza2lwQXV0aCkge1xuICAgICAgaWYgKCFhdXRoSGVhZGVyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImF1dGhvcml6YXRpb24gaGVhZGVyIGlzIGVtcHR5XCIpO1xuICAgICAgfVxuICAgICAgY29uc3QgY2xhaW1zID0gYXdhaXQgdGhpcy52ZXJpZmllci52ZXJpZnkoYXV0aEhlYWRlciwgY2xvY2tUb2xlcmFuY2UpO1xuICAgICAgY29uc3QgaGFzaCA9IGF3YWl0IGRpZ2VzdChib2R5KTtcbiAgICAgIGNvbnN0IGhhc2hEZWNvZGVkID0gYnRvYShcbiAgICAgICAgQXJyYXkuZnJvbShuZXcgVWludDhBcnJheShoYXNoKSkubWFwKCh2KSA9PiBTdHJpbmcuZnJvbUNoYXJDb2RlKHYpKS5qb2luKFwiXCIpXG4gICAgICApO1xuICAgICAgaWYgKGNsYWltcy5zaGEyNTYgIT09IGhhc2hEZWNvZGVkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcInNoYTI1NiBjaGVja3N1bSBvZiBib2R5IGRvZXMgbm90IG1hdGNoXCIpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gV2ViaG9va0V2ZW50LmZyb21Kc29uKEpTT04ucGFyc2UoYm9keSksIHsgaWdub3JlVW5rbm93bkZpZWxkczogdHJ1ZSB9KTtcbiAgfVxufVxuZXhwb3J0IHtcbiAgV2ViaG9va0V2ZW50LFxuICBXZWJob29rUmVjZWl2ZXIsXG4gIGF1dGhvcml6ZUhlYWRlclxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVdlYmhvb2tSZWNlaXZlci5qcy5tYXAiXSwibmFtZXMiOlsiV2ViaG9va0V2ZW50IiwiUHJvdG9XZWJob29rRXZlbnQiLCJUb2tlblZlcmlmaWVyIiwiZGlnZXN0IiwiYXV0aG9yaXplSGVhZGVyIiwiY29uc3RydWN0b3IiLCJhcmd1bWVudHMiLCJldmVudCIsImZyb21CaW5hcnkiLCJieXRlcyIsIm9wdGlvbnMiLCJmcm9tSnNvbiIsImpzb25WYWx1ZSIsImZyb21Kc29uU3RyaW5nIiwianNvblN0cmluZyIsIldlYmhvb2tSZWNlaXZlciIsImFwaUtleSIsImFwaVNlY3JldCIsInZlcmlmaWVyIiwicmVjZWl2ZSIsImJvZHkiLCJhdXRoSGVhZGVyIiwic2tpcEF1dGgiLCJjbG9ja1RvbGVyYW5jZSIsIkVycm9yIiwiY2xhaW1zIiwidmVyaWZ5IiwiaGFzaCIsImhhc2hEZWNvZGVkIiwiYnRvYSIsIkFycmF5IiwiZnJvbSIsIlVpbnQ4QXJyYXkiLCJtYXAiLCJ2IiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwiam9pbiIsInNoYTI1NiIsIkpTT04iLCJwYXJzZSIsImlnbm9yZVVua25vd25GaWVsZHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/livekit-server-sdk/dist/WebhookReceiver.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/livekit-server-sdk/dist/crypto/digest.js":
/*!***************************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/crypto/digest.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   digest: () => (/* binding */ digest)\n/* harmony export */ });\nasync function digest(data) {\n    var _a;\n    if ((_a = globalThis.crypto) == null ? void 0 : _a.subtle) {\n        const encoder = new TextEncoder();\n        return crypto.subtle.digest(\"SHA-256\", encoder.encode(data));\n    } else {\n        const nodeCrypto = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! node:crypto */ \"node:crypto\", 19));\n        return nodeCrypto.createHash(\"sha256\").update(data).digest();\n    }\n}\n //# sourceMappingURL=digest.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGl2ZWtpdC1zZXJ2ZXItc2RrL2Rpc3QvY3J5cHRvL2RpZ2VzdC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsZUFBZUEsT0FBT0MsSUFBSTtJQUN4QixJQUFJQztJQUNKLElBQUksQ0FBQ0EsS0FBS0MsV0FBV0MsTUFBTSxLQUFLLE9BQU8sS0FBSyxJQUFJRixHQUFHRyxNQUFNLEVBQUU7UUFDekQsTUFBTUMsVUFBVSxJQUFJQztRQUNwQixPQUFPSCxPQUFPQyxNQUFNLENBQUNMLE1BQU0sQ0FBQyxXQUFXTSxRQUFRRSxNQUFNLENBQUNQO0lBQ3hELE9BQU87UUFDTCxNQUFNUSxhQUFhLE1BQU0sNEhBQXFCO1FBQzlDLE9BQU9BLFdBQVdDLFVBQVUsQ0FBQyxVQUFVQyxNQUFNLENBQUNWLE1BQU1ELE1BQU07SUFDNUQ7QUFDRjtBQUdFLENBQ0Ysa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYW5pbWEtcHJvamVjdC8uL25vZGVfbW9kdWxlcy9saXZla2l0LXNlcnZlci1zZGsvZGlzdC9jcnlwdG8vZGlnZXN0LmpzPzQzYTEiXSwic291cmNlc0NvbnRlbnQiOlsiYXN5bmMgZnVuY3Rpb24gZGlnZXN0KGRhdGEpIHtcbiAgdmFyIF9hO1xuICBpZiAoKF9hID0gZ2xvYmFsVGhpcy5jcnlwdG8pID09IG51bGwgPyB2b2lkIDAgOiBfYS5zdWJ0bGUpIHtcbiAgICBjb25zdCBlbmNvZGVyID0gbmV3IFRleHRFbmNvZGVyKCk7XG4gICAgcmV0dXJuIGNyeXB0by5zdWJ0bGUuZGlnZXN0KFwiU0hBLTI1NlwiLCBlbmNvZGVyLmVuY29kZShkYXRhKSk7XG4gIH0gZWxzZSB7XG4gICAgY29uc3Qgbm9kZUNyeXB0byA9IGF3YWl0IGltcG9ydChcIm5vZGU6Y3J5cHRvXCIpO1xuICAgIHJldHVybiBub2RlQ3J5cHRvLmNyZWF0ZUhhc2goXCJzaGEyNTZcIikudXBkYXRlKGRhdGEpLmRpZ2VzdCgpO1xuICB9XG59XG5leHBvcnQge1xuICBkaWdlc3Rcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kaWdlc3QuanMubWFwIl0sIm5hbWVzIjpbImRpZ2VzdCIsImRhdGEiLCJfYSIsImdsb2JhbFRoaXMiLCJjcnlwdG8iLCJzdWJ0bGUiLCJlbmNvZGVyIiwiVGV4dEVuY29kZXIiLCJlbmNvZGUiLCJub2RlQ3J5cHRvIiwiY3JlYXRlSGFzaCIsInVwZGF0ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/livekit-server-sdk/dist/crypto/digest.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/livekit-server-sdk/dist/crypto/uuid.js":
/*!*************************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/crypto/uuid.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getRandomBytes: () => (/* binding */ getRandomBytes)\n/* harmony export */ });\nasync function getRandomBytes(size = 16) {\n    if (globalThis.crypto) {\n        return crypto.getRandomValues(new Uint8Array(size));\n    } else {\n        const nodeCrypto = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! node:crypto */ \"node:crypto\", 19));\n        return nodeCrypto.getRandomValues(new Uint8Array(size));\n    }\n}\n //# sourceMappingURL=uuid.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGl2ZWtpdC1zZXJ2ZXItc2RrL2Rpc3QvY3J5cHRvL3V1aWQuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGVBQWVBLGVBQWVDLE9BQU8sRUFBRTtJQUNyQyxJQUFJQyxXQUFXQyxNQUFNLEVBQUU7UUFDckIsT0FBT0EsT0FBT0MsZUFBZSxDQUFDLElBQUlDLFdBQVdKO0lBQy9DLE9BQU87UUFDTCxNQUFNSyxhQUFhLE1BQU0sNEhBQXFCO1FBQzlDLE9BQU9BLFdBQVdGLGVBQWUsQ0FBQyxJQUFJQyxXQUFXSjtJQUNuRDtBQUNGO0FBR0UsQ0FDRixnQ0FBZ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbmltYS1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL2xpdmVraXQtc2VydmVyLXNkay9kaXN0L2NyeXB0by91dWlkLmpzPzBkZjMiXSwic291cmNlc0NvbnRlbnQiOlsiYXN5bmMgZnVuY3Rpb24gZ2V0UmFuZG9tQnl0ZXMoc2l6ZSA9IDE2KSB7XG4gIGlmIChnbG9iYWxUaGlzLmNyeXB0bykge1xuICAgIHJldHVybiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKG5ldyBVaW50OEFycmF5KHNpemUpKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBub2RlQ3J5cHRvID0gYXdhaXQgaW1wb3J0KFwibm9kZTpjcnlwdG9cIik7XG4gICAgcmV0dXJuIG5vZGVDcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKG5ldyBVaW50OEFycmF5KHNpemUpKTtcbiAgfVxufVxuZXhwb3J0IHtcbiAgZ2V0UmFuZG9tQnl0ZXNcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dWlkLmpzLm1hcCJdLCJuYW1lcyI6WyJnZXRSYW5kb21CeXRlcyIsInNpemUiLCJnbG9iYWxUaGlzIiwiY3J5cHRvIiwiZ2V0UmFuZG9tVmFsdWVzIiwiVWludDhBcnJheSIsIm5vZGVDcnlwdG8iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/livekit-server-sdk/dist/crypto/uuid.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/livekit-server-sdk/dist/grants.js":
/*!********************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/grants.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   claimsToJwtPayload: () => (/* binding */ claimsToJwtPayload),\n/* harmony export */   trackSourceToString: () => (/* binding */ trackSourceToString)\n/* harmony export */ });\n/* harmony import */ var _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @livekit/protocol */ \"(rsc)/./node_modules/@livekit/protocol/dist/index.mjs\");\n\nfunction trackSourceToString(source) {\n    switch(source){\n        case _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.TrackSource.CAMERA:\n            return \"camera\";\n        case _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.TrackSource.MICROPHONE:\n            return \"microphone\";\n        case _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.TrackSource.SCREEN_SHARE:\n            return \"screen_share\";\n        case _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.TrackSource.SCREEN_SHARE_AUDIO:\n            return \"screen_share_audio\";\n        default:\n            throw new TypeError(`Cannot convert TrackSource ${source} to string`);\n    }\n}\nfunction claimsToJwtPayload(grant) {\n    var _a;\n    const claim = {\n        ...grant\n    };\n    if (Array.isArray((_a = claim.video) == null ? void 0 : _a.canPublishSources)) {\n        claim.video.canPublishSources = claim.video.canPublishSources.map(trackSourceToString);\n    }\n    return claim;\n}\n //# sourceMappingURL=grants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGl2ZWtpdC1zZXJ2ZXItc2RrL2Rpc3QvZ3JhbnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFnRDtBQUNoRCxTQUFTQyxvQkFBb0JDLE1BQU07SUFDakMsT0FBUUE7UUFDTixLQUFLRiwwREFBV0EsQ0FBQ0csTUFBTTtZQUNyQixPQUFPO1FBQ1QsS0FBS0gsMERBQVdBLENBQUNJLFVBQVU7WUFDekIsT0FBTztRQUNULEtBQUtKLDBEQUFXQSxDQUFDSyxZQUFZO1lBQzNCLE9BQU87UUFDVCxLQUFLTCwwREFBV0EsQ0FBQ00sa0JBQWtCO1lBQ2pDLE9BQU87UUFDVDtZQUNFLE1BQU0sSUFBSUMsVUFBVSxDQUFDLDJCQUEyQixFQUFFTCxPQUFPLFVBQVUsQ0FBQztJQUN4RTtBQUNGO0FBQ0EsU0FBU00sbUJBQW1CQyxLQUFLO0lBQy9CLElBQUlDO0lBQ0osTUFBTUMsUUFBUTtRQUFFLEdBQUdGLEtBQUs7SUFBQztJQUN6QixJQUFJRyxNQUFNQyxPQUFPLENBQUMsQ0FBQ0gsS0FBS0MsTUFBTUcsS0FBSyxLQUFLLE9BQU8sS0FBSyxJQUFJSixHQUFHSyxpQkFBaUIsR0FBRztRQUM3RUosTUFBTUcsS0FBSyxDQUFDQyxpQkFBaUIsR0FBR0osTUFBTUcsS0FBSyxDQUFDQyxpQkFBaUIsQ0FBQ0MsR0FBRyxDQUFDZjtJQUNwRTtJQUNBLE9BQU9VO0FBQ1Q7QUFJRSxDQUNGLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL2FuaW1hLXByb2plY3QvLi9ub2RlX21vZHVsZXMvbGl2ZWtpdC1zZXJ2ZXItc2RrL2Rpc3QvZ3JhbnRzLmpzP2Q2MjAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVHJhY2tTb3VyY2UgfSBmcm9tIFwiQGxpdmVraXQvcHJvdG9jb2xcIjtcbmZ1bmN0aW9uIHRyYWNrU291cmNlVG9TdHJpbmcoc291cmNlKSB7XG4gIHN3aXRjaCAoc291cmNlKSB7XG4gICAgY2FzZSBUcmFja1NvdXJjZS5DQU1FUkE6XG4gICAgICByZXR1cm4gXCJjYW1lcmFcIjtcbiAgICBjYXNlIFRyYWNrU291cmNlLk1JQ1JPUEhPTkU6XG4gICAgICByZXR1cm4gXCJtaWNyb3Bob25lXCI7XG4gICAgY2FzZSBUcmFja1NvdXJjZS5TQ1JFRU5fU0hBUkU6XG4gICAgICByZXR1cm4gXCJzY3JlZW5fc2hhcmVcIjtcbiAgICBjYXNlIFRyYWNrU291cmNlLlNDUkVFTl9TSEFSRV9BVURJTzpcbiAgICAgIHJldHVybiBcInNjcmVlbl9zaGFyZV9hdWRpb1wiO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBDYW5ub3QgY29udmVydCBUcmFja1NvdXJjZSAke3NvdXJjZX0gdG8gc3RyaW5nYCk7XG4gIH1cbn1cbmZ1bmN0aW9uIGNsYWltc1RvSnd0UGF5bG9hZChncmFudCkge1xuICB2YXIgX2E7XG4gIGNvbnN0IGNsYWltID0geyAuLi5ncmFudCB9O1xuICBpZiAoQXJyYXkuaXNBcnJheSgoX2EgPSBjbGFpbS52aWRlbykgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLmNhblB1Ymxpc2hTb3VyY2VzKSkge1xuICAgIGNsYWltLnZpZGVvLmNhblB1Ymxpc2hTb3VyY2VzID0gY2xhaW0udmlkZW8uY2FuUHVibGlzaFNvdXJjZXMubWFwKHRyYWNrU291cmNlVG9TdHJpbmcpO1xuICB9XG4gIHJldHVybiBjbGFpbTtcbn1cbmV4cG9ydCB7XG4gIGNsYWltc1RvSnd0UGF5bG9hZCxcbiAgdHJhY2tTb3VyY2VUb1N0cmluZ1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdyYW50cy5qcy5tYXAiXSwibmFtZXMiOlsiVHJhY2tTb3VyY2UiLCJ0cmFja1NvdXJjZVRvU3RyaW5nIiwic291cmNlIiwiQ0FNRVJBIiwiTUlDUk9QSE9ORSIsIlNDUkVFTl9TSEFSRSIsIlNDUkVFTl9TSEFSRV9BVURJTyIsIlR5cGVFcnJvciIsImNsYWltc1RvSnd0UGF5bG9hZCIsImdyYW50IiwiX2EiLCJjbGFpbSIsIkFycmF5IiwiaXNBcnJheSIsInZpZGVvIiwiY2FuUHVibGlzaFNvdXJjZXMiLCJtYXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/livekit-server-sdk/dist/grants.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/livekit-server-sdk/dist/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AccessToken: () => (/* reexport safe */ _AccessToken_js__WEBPACK_IMPORTED_MODULE_1__.AccessToken),\n/* harmony export */   AgentDispatchClient: () => (/* reexport safe */ _AgentDispatchClient_js__WEBPACK_IMPORTED_MODULE_2__.AgentDispatchClient),\n/* harmony export */   AliOSSUpload: () => (/* reexport safe */ _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.AliOSSUpload),\n/* harmony export */   AudioCodec: () => (/* reexport safe */ _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.AudioCodec),\n/* harmony export */   AutoParticipantEgress: () => (/* reexport safe */ _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.AutoParticipantEgress),\n/* harmony export */   AutoTrackEgress: () => (/* reexport safe */ _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.AutoTrackEgress),\n/* harmony export */   AzureBlobUpload: () => (/* reexport safe */ _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.AzureBlobUpload),\n/* harmony export */   DataPacket_Kind: () => (/* reexport safe */ _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.DataPacket_Kind),\n/* harmony export */   DirectFileOutput: () => (/* reexport safe */ _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.DirectFileOutput),\n/* harmony export */   EgressClient: () => (/* reexport safe */ _EgressClient_js__WEBPACK_IMPORTED_MODULE_3__.EgressClient),\n/* harmony export */   EgressInfo: () => (/* reexport safe */ _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.EgressInfo),\n/* harmony export */   EgressStatus: () => (/* reexport safe */ _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.EgressStatus),\n/* harmony export */   EncodedFileOutput: () => (/* reexport safe */ _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.EncodedFileOutput),\n/* harmony export */   EncodedFileType: () => (/* reexport safe */ _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.EncodedFileType),\n/* harmony export */   EncodingOptions: () => (/* reexport safe */ _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.EncodingOptions),\n/* harmony export */   EncodingOptionsPreset: () => (/* reexport safe */ _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.EncodingOptionsPreset),\n/* harmony export */   GCPUpload: () => (/* reexport safe */ _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.GCPUpload),\n/* harmony export */   ImageCodec: () => (/* reexport safe */ _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.ImageCodec),\n/* harmony export */   ImageFileSuffix: () => (/* reexport safe */ _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.ImageFileSuffix),\n/* harmony export */   ImageOutput: () => (/* reexport safe */ _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.ImageOutput),\n/* harmony export */   IngressAudioEncodingOptions: () => (/* reexport safe */ _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.IngressAudioEncodingOptions),\n/* harmony export */   IngressAudioEncodingPreset: () => (/* reexport safe */ _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.IngressAudioEncodingPreset),\n/* harmony export */   IngressAudioOptions: () => (/* reexport safe */ _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.IngressAudioOptions),\n/* harmony export */   IngressClient: () => (/* reexport safe */ _IngressClient_js__WEBPACK_IMPORTED_MODULE_5__.IngressClient),\n/* harmony export */   IngressInfo: () => (/* reexport safe */ _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.IngressInfo),\n/* harmony export */   IngressInput: () => (/* reexport safe */ _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.IngressInput),\n/* harmony export */   IngressState: () => (/* reexport safe */ _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.IngressState),\n/* harmony export */   IngressVideoEncodingOptions: () => (/* reexport safe */ _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.IngressVideoEncodingOptions),\n/* harmony export */   IngressVideoEncodingPreset: () => (/* reexport safe */ _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.IngressVideoEncodingPreset),\n/* harmony export */   IngressVideoOptions: () => (/* reexport safe */ _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.IngressVideoOptions),\n/* harmony export */   ParticipantEgressRequest: () => (/* reexport safe */ _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.ParticipantEgressRequest),\n/* harmony export */   ParticipantInfo: () => (/* reexport safe */ _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.ParticipantInfo),\n/* harmony export */   ParticipantInfo_State: () => (/* reexport safe */ _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.ParticipantInfo_State),\n/* harmony export */   ParticipantPermission: () => (/* reexport safe */ _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.ParticipantPermission),\n/* harmony export */   Room: () => (/* reexport safe */ _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.Room),\n/* harmony export */   RoomCompositeEgressRequest: () => (/* reexport safe */ _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.RoomCompositeEgressRequest),\n/* harmony export */   RoomEgress: () => (/* reexport safe */ _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.RoomEgress),\n/* harmony export */   RoomServiceClient: () => (/* reexport safe */ _RoomServiceClient_js__WEBPACK_IMPORTED_MODULE_6__.RoomServiceClient),\n/* harmony export */   S3Upload: () => (/* reexport safe */ _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.S3Upload),\n/* harmony export */   SIPDispatchRuleInfo: () => (/* reexport safe */ _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.SIPDispatchRuleInfo),\n/* harmony export */   SIPParticipantInfo: () => (/* reexport safe */ _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.SIPParticipantInfo),\n/* harmony export */   SIPTrunkInfo: () => (/* reexport safe */ _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.SIPTrunkInfo),\n/* harmony export */   SegmentedFileOutput: () => (/* reexport safe */ _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.SegmentedFileOutput),\n/* harmony export */   SegmentedFileProtocol: () => (/* reexport safe */ _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.SegmentedFileProtocol),\n/* harmony export */   SipClient: () => (/* reexport safe */ _SipClient_js__WEBPACK_IMPORTED_MODULE_7__.SipClient),\n/* harmony export */   StreamOutput: () => (/* reexport safe */ _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.StreamOutput),\n/* harmony export */   StreamProtocol: () => (/* reexport safe */ _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.StreamProtocol),\n/* harmony export */   TokenVerifier: () => (/* reexport safe */ _AccessToken_js__WEBPACK_IMPORTED_MODULE_1__.TokenVerifier),\n/* harmony export */   TrackCompositeEgressRequest: () => (/* reexport safe */ _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.TrackCompositeEgressRequest),\n/* harmony export */   TrackEgressRequest: () => (/* reexport safe */ _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.TrackEgressRequest),\n/* harmony export */   TrackInfo: () => (/* reexport safe */ _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.TrackInfo),\n/* harmony export */   TrackSource: () => (/* reexport safe */ _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.TrackSource),\n/* harmony export */   TrackType: () => (/* reexport safe */ _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.TrackType),\n/* harmony export */   VideoCodec: () => (/* reexport safe */ _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.VideoCodec),\n/* harmony export */   WebEgressRequest: () => (/* reexport safe */ _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__.WebEgressRequest),\n/* harmony export */   WebhookEvent: () => (/* reexport safe */ _WebhookReceiver_js__WEBPACK_IMPORTED_MODULE_8__.WebhookEvent),\n/* harmony export */   WebhookReceiver: () => (/* reexport safe */ _WebhookReceiver_js__WEBPACK_IMPORTED_MODULE_8__.WebhookReceiver),\n/* harmony export */   authorizeHeader: () => (/* reexport safe */ _WebhookReceiver_js__WEBPACK_IMPORTED_MODULE_8__.authorizeHeader),\n/* harmony export */   claimsToJwtPayload: () => (/* reexport safe */ _grants_js__WEBPACK_IMPORTED_MODULE_4__.claimsToJwtPayload),\n/* harmony export */   trackSourceToString: () => (/* reexport safe */ _grants_js__WEBPACK_IMPORTED_MODULE_4__.trackSourceToString)\n/* harmony export */ });\n/* harmony import */ var _livekit_protocol__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @livekit/protocol */ \"(rsc)/./node_modules/@livekit/protocol/dist/index.mjs\");\n/* harmony import */ var _AccessToken_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AccessToken.js */ \"(rsc)/./node_modules/livekit-server-sdk/dist/AccessToken.js\");\n/* harmony import */ var _AgentDispatchClient_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./AgentDispatchClient.js */ \"(rsc)/./node_modules/livekit-server-sdk/dist/AgentDispatchClient.js\");\n/* harmony import */ var _EgressClient_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./EgressClient.js */ \"(rsc)/./node_modules/livekit-server-sdk/dist/EgressClient.js\");\n/* harmony import */ var _grants_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./grants.js */ \"(rsc)/./node_modules/livekit-server-sdk/dist/grants.js\");\n/* harmony import */ var _IngressClient_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./IngressClient.js */ \"(rsc)/./node_modules/livekit-server-sdk/dist/IngressClient.js\");\n/* harmony import */ var _RoomServiceClient_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./RoomServiceClient.js */ \"(rsc)/./node_modules/livekit-server-sdk/dist/RoomServiceClient.js\");\n/* harmony import */ var _SipClient_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./SipClient.js */ \"(rsc)/./node_modules/livekit-server-sdk/dist/SipClient.js\");\n/* harmony import */ var _WebhookReceiver_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./WebhookReceiver.js */ \"(rsc)/./node_modules/livekit-server-sdk/dist/WebhookReceiver.js\");\n\n\n\n\n\n\n\n\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGl2ZWtpdC1zZXJ2ZXItc2RrL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUQyQjtBQUNNO0FBQ1E7QUFDUDtBQUNOO0FBQ087QUFDSTtBQUNSO0FBQ007QUFrRG5DLENBQ0YsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYW5pbWEtcHJvamVjdC8uL25vZGVfbW9kdWxlcy9saXZla2l0LXNlcnZlci1zZGsvZGlzdC9pbmRleC5qcz8zY2UwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEFsaU9TU1VwbG9hZCxcbiAgQXVkaW9Db2RlYyxcbiAgQXV0b1BhcnRpY2lwYW50RWdyZXNzLFxuICBBdXRvVHJhY2tFZ3Jlc3MsXG4gIEF6dXJlQmxvYlVwbG9hZCxcbiAgRGF0YVBhY2tldF9LaW5kLFxuICBEaXJlY3RGaWxlT3V0cHV0LFxuICBFZ3Jlc3NJbmZvLFxuICBFZ3Jlc3NTdGF0dXMsXG4gIEVuY29kZWRGaWxlT3V0cHV0LFxuICBFbmNvZGVkRmlsZVR5cGUsXG4gIEVuY29kaW5nT3B0aW9ucyxcbiAgRW5jb2RpbmdPcHRpb25zUHJlc2V0LFxuICBHQ1BVcGxvYWQsXG4gIEltYWdlQ29kZWMsXG4gIEltYWdlRmlsZVN1ZmZpeCxcbiAgSW1hZ2VPdXRwdXQsXG4gIEluZ3Jlc3NBdWRpb0VuY29kaW5nT3B0aW9ucyxcbiAgSW5ncmVzc0F1ZGlvRW5jb2RpbmdQcmVzZXQsXG4gIEluZ3Jlc3NBdWRpb09wdGlvbnMsXG4gIEluZ3Jlc3NJbmZvLFxuICBJbmdyZXNzSW5wdXQsXG4gIEluZ3Jlc3NTdGF0ZSxcbiAgSW5ncmVzc1ZpZGVvRW5jb2RpbmdPcHRpb25zLFxuICBJbmdyZXNzVmlkZW9FbmNvZGluZ1ByZXNldCxcbiAgSW5ncmVzc1ZpZGVvT3B0aW9ucyxcbiAgUGFydGljaXBhbnRFZ3Jlc3NSZXF1ZXN0LFxuICBQYXJ0aWNpcGFudEluZm8sXG4gIFBhcnRpY2lwYW50SW5mb19TdGF0ZSxcbiAgUGFydGljaXBhbnRQZXJtaXNzaW9uLFxuICBSb29tLFxuICBSb29tQ29tcG9zaXRlRWdyZXNzUmVxdWVzdCxcbiAgUm9vbUVncmVzcyxcbiAgUzNVcGxvYWQsXG4gIFNJUERpc3BhdGNoUnVsZUluZm8sXG4gIFNJUFBhcnRpY2lwYW50SW5mbyxcbiAgU0lQVHJ1bmtJbmZvLFxuICBTZWdtZW50ZWRGaWxlT3V0cHV0LFxuICBTZWdtZW50ZWRGaWxlUHJvdG9jb2wsXG4gIFN0cmVhbU91dHB1dCxcbiAgU3RyZWFtUHJvdG9jb2wsXG4gIFRyYWNrQ29tcG9zaXRlRWdyZXNzUmVxdWVzdCxcbiAgVHJhY2tFZ3Jlc3NSZXF1ZXN0LFxuICBUcmFja0luZm8sXG4gIFRyYWNrU291cmNlLFxuICBUcmFja1R5cGUsXG4gIFdlYkVncmVzc1JlcXVlc3QsXG4gIFZpZGVvQ29kZWNcbn0gZnJvbSBcIkBsaXZla2l0L3Byb3RvY29sXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9BY2Nlc3NUb2tlbi5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vQWdlbnREaXNwYXRjaENsaWVudC5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vRWdyZXNzQ2xpZW50LmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9ncmFudHMuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL0luZ3Jlc3NDbGllbnQuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL1Jvb21TZXJ2aWNlQ2xpZW50LmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9TaXBDbGllbnQuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL1dlYmhvb2tSZWNlaXZlci5qc1wiO1xuZXhwb3J0IHtcbiAgQWxpT1NTVXBsb2FkLFxuICBBdWRpb0NvZGVjLFxuICBBdXRvUGFydGljaXBhbnRFZ3Jlc3MsXG4gIEF1dG9UcmFja0VncmVzcyxcbiAgQXp1cmVCbG9iVXBsb2FkLFxuICBEYXRhUGFja2V0X0tpbmQsXG4gIERpcmVjdEZpbGVPdXRwdXQsXG4gIEVncmVzc0luZm8sXG4gIEVncmVzc1N0YXR1cyxcbiAgRW5jb2RlZEZpbGVPdXRwdXQsXG4gIEVuY29kZWRGaWxlVHlwZSxcbiAgRW5jb2RpbmdPcHRpb25zLFxuICBFbmNvZGluZ09wdGlvbnNQcmVzZXQsXG4gIEdDUFVwbG9hZCxcbiAgSW1hZ2VDb2RlYyxcbiAgSW1hZ2VGaWxlU3VmZml4LFxuICBJbWFnZU91dHB1dCxcbiAgSW5ncmVzc0F1ZGlvRW5jb2RpbmdPcHRpb25zLFxuICBJbmdyZXNzQXVkaW9FbmNvZGluZ1ByZXNldCxcbiAgSW5ncmVzc0F1ZGlvT3B0aW9ucyxcbiAgSW5ncmVzc0luZm8sXG4gIEluZ3Jlc3NJbnB1dCxcbiAgSW5ncmVzc1N0YXRlLFxuICBJbmdyZXNzVmlkZW9FbmNvZGluZ09wdGlvbnMsXG4gIEluZ3Jlc3NWaWRlb0VuY29kaW5nUHJlc2V0LFxuICBJbmdyZXNzVmlkZW9PcHRpb25zLFxuICBQYXJ0aWNpcGFudEVncmVzc1JlcXVlc3QsXG4gIFBhcnRpY2lwYW50SW5mbyxcbiAgUGFydGljaXBhbnRJbmZvX1N0YXRlLFxuICBQYXJ0aWNpcGFudFBlcm1pc3Npb24sXG4gIFJvb20sXG4gIFJvb21Db21wb3NpdGVFZ3Jlc3NSZXF1ZXN0LFxuICBSb29tRWdyZXNzLFxuICBTM1VwbG9hZCxcbiAgU0lQRGlzcGF0Y2hSdWxlSW5mbyxcbiAgU0lQUGFydGljaXBhbnRJbmZvLFxuICBTSVBUcnVua0luZm8sXG4gIFNlZ21lbnRlZEZpbGVPdXRwdXQsXG4gIFNlZ21lbnRlZEZpbGVQcm90b2NvbCxcbiAgU3RyZWFtT3V0cHV0LFxuICBTdHJlYW1Qcm90b2NvbCxcbiAgVHJhY2tDb21wb3NpdGVFZ3Jlc3NSZXF1ZXN0LFxuICBUcmFja0VncmVzc1JlcXVlc3QsXG4gIFRyYWNrSW5mbyxcbiAgVHJhY2tTb3VyY2UsXG4gIFRyYWNrVHlwZSxcbiAgVmlkZW9Db2RlYyxcbiAgV2ViRWdyZXNzUmVxdWVzdFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJBbGlPU1NVcGxvYWQiLCJBdWRpb0NvZGVjIiwiQXV0b1BhcnRpY2lwYW50RWdyZXNzIiwiQXV0b1RyYWNrRWdyZXNzIiwiQXp1cmVCbG9iVXBsb2FkIiwiRGF0YVBhY2tldF9LaW5kIiwiRGlyZWN0RmlsZU91dHB1dCIsIkVncmVzc0luZm8iLCJFZ3Jlc3NTdGF0dXMiLCJFbmNvZGVkRmlsZU91dHB1dCIsIkVuY29kZWRGaWxlVHlwZSIsIkVuY29kaW5nT3B0aW9ucyIsIkVuY29kaW5nT3B0aW9uc1ByZXNldCIsIkdDUFVwbG9hZCIsIkltYWdlQ29kZWMiLCJJbWFnZUZpbGVTdWZmaXgiLCJJbWFnZU91dHB1dCIsIkluZ3Jlc3NBdWRpb0VuY29kaW5nT3B0aW9ucyIsIkluZ3Jlc3NBdWRpb0VuY29kaW5nUHJlc2V0IiwiSW5ncmVzc0F1ZGlvT3B0aW9ucyIsIkluZ3Jlc3NJbmZvIiwiSW5ncmVzc0lucHV0IiwiSW5ncmVzc1N0YXRlIiwiSW5ncmVzc1ZpZGVvRW5jb2RpbmdPcHRpb25zIiwiSW5ncmVzc1ZpZGVvRW5jb2RpbmdQcmVzZXQiLCJJbmdyZXNzVmlkZW9PcHRpb25zIiwiUGFydGljaXBhbnRFZ3Jlc3NSZXF1ZXN0IiwiUGFydGljaXBhbnRJbmZvIiwiUGFydGljaXBhbnRJbmZvX1N0YXRlIiwiUGFydGljaXBhbnRQZXJtaXNzaW9uIiwiUm9vbSIsIlJvb21Db21wb3NpdGVFZ3Jlc3NSZXF1ZXN0IiwiUm9vbUVncmVzcyIsIlMzVXBsb2FkIiwiU0lQRGlzcGF0Y2hSdWxlSW5mbyIsIlNJUFBhcnRpY2lwYW50SW5mbyIsIlNJUFRydW5rSW5mbyIsIlNlZ21lbnRlZEZpbGVPdXRwdXQiLCJTZWdtZW50ZWRGaWxlUHJvdG9jb2wiLCJTdHJlYW1PdXRwdXQiLCJTdHJlYW1Qcm90b2NvbCIsIlRyYWNrQ29tcG9zaXRlRWdyZXNzUmVxdWVzdCIsIlRyYWNrRWdyZXNzUmVxdWVzdCIsIlRyYWNrSW5mbyIsIlRyYWNrU291cmNlIiwiVHJhY2tUeXBlIiwiV2ViRWdyZXNzUmVxdWVzdCIsIlZpZGVvQ29kZWMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/livekit-server-sdk/dist/index.js\n");

/***/ })

};
;