"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_ssr_src_utils_storageUtils_ts";
exports.ids = ["_ssr_src_utils_storageUtils_ts"];
exports.modules = {

/***/ "(ssr)/./src/utils/storageUtils.ts":
/*!***********************************!*\
  !*** ./src/utils/storageUtils.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   compressImageDataUrl: () => (/* binding */ compressImageDataUrl),\n/* harmony export */   estimateLocalStorageUsage: () => (/* binding */ estimateLocalStorageUsage),\n/* harmony export */   optimizeCanvasDataForStorage: () => (/* binding */ optimizeCanvasDataForStorage),\n/* harmony export */   safeLocalStorage: () => (/* binding */ safeLocalStorage)\n/* harmony export */ });\n/**\n * Utility functions to help with localStorage optimization and management\n */ /**\n * Compresses image data in a canvas state object to reduce localStorage usage.\n * This function will resize/compress any large image URLs in the canvas elements.\n */ function optimizeCanvasDataForStorage(canvasData) {\n    return canvasData.map((element)=>{\n        // Clone the element to avoid modifying the original\n        const optimizedElement = {\n            ...element\n        };\n        // If it's an image element with a data URL\n        if (element.type === \"image\" && typeof element.url === \"string\" && element.url.startsWith(\"data:image\")) {\n            // Replace with a compressed version\n            optimizedElement.url = compressImageDataUrl(element.url, 0.7, 800); // 70% quality, max 800px\n        }\n        // Also check metadata for image data\n        if (element.metadata) {\n            const newMetadata = {\n                ...element.metadata\n            };\n            // Check for originalImage in metadata (often holds a base64 image)\n            if (typeof newMetadata.originalImage === \"string\" && newMetadata.originalImage.startsWith(\"data:image\")) {\n                newMetadata.originalImage = compressImageDataUrl(newMetadata.originalImage, 0.6, 400); // More aggressive compression for metadata\n            }\n            optimizedElement.metadata = newMetadata;\n        }\n        return optimizedElement;\n    });\n}\n/**\n * Compresses a data URL image by resizing and reducing quality.\n * @param dataUrl The original data URL\n * @param quality Quality factor (0-1)\n * @param maxDimension Maximum width or height\n * @returns Compressed data URL\n */ function compressImageDataUrl(dataUrl, quality = 0.8, maxDimension = 1024) {\n    try {\n        // If the data URL is already small, don't process it\n        if (dataUrl.length < 10000) {\n            return dataUrl;\n        }\n        // Create temporary image and canvas in memory\n        const img = document.createElement(\"img\");\n        img.src = dataUrl;\n        // Create a canvas element to draw the resized image\n        const canvas = document.createElement(\"canvas\");\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) {\n            console.warn(\"Unable to get canvas context for compression\");\n            return dataUrl;\n        }\n        // Calculate new dimensions while maintaining aspect ratio\n        let width = img.width;\n        let height = img.height;\n        if (width > height && width > maxDimension) {\n            height = Math.round(height * maxDimension / width);\n            width = maxDimension;\n        } else if (height > maxDimension) {\n            width = Math.round(width * maxDimension / height);\n            height = maxDimension;\n        }\n        // Set canvas size to the new dimensions\n        canvas.width = width;\n        canvas.height = height;\n        // Draw the resized image on the canvas\n        ctx.drawImage(img, 0, 0, width, height);\n        // Convert to compressed data URL\n        return canvas.toDataURL(\"image/jpeg\", quality);\n    } catch (error) {\n        console.error(\"Error compressing image:\", error);\n        // Return original if compression fails\n        return dataUrl;\n    }\n}\n/**\n * Safely stores data in localStorage with size checks\n * @param key localStorage key\n * @param data Data to store\n * @returns true if successful, false if failed\n */ function safeLocalStorage(key, data) {\n    try {\n        // Check data size\n        const sizeInMB = data.length * 2 / 1024 / 1024; // Rough estimation of string size in MB\n        if (sizeInMB > 4) {\n            console.warn(`Data for ${key} is very large (${sizeInMB.toFixed(2)}MB), may exceed localStorage limits`);\n        }\n        // Try to store it\n        localStorage.setItem(key, data);\n        return true;\n    } catch (error) {\n        console.error(`Failed to save data to localStorage for key ${key}:`, error);\n        return false;\n    }\n}\n/**\n * Estimate the current localStorage usage as a percentage of available space\n * This is approximate since browsers don't expose exact quota information\n */ function estimateLocalStorageUsage() {\n    try {\n        // Get all keys\n        const keys = Object.keys(localStorage);\n        let totalSize = 0;\n        // Calculate total size of all items\n        keys.forEach((key)=>{\n            const value = localStorage.getItem(key);\n            if (value) {\n                totalSize += key.length + value.length;\n            }\n        });\n        // Convert to MB (approximate)\n        const sizeInMB = totalSize * 2 / 1024 / 1024;\n        // Estimate quota (most browsers have 5-10MB)\n        const estimatedQuota = 5; // Conservative estimate in MB\n        // Return as percentage\n        return Math.min(100, sizeInMB / estimatedQuota * 100);\n    } catch (error) {\n        console.error(\"Error estimating localStorage usage:\", error);\n        return 0;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./src/utils/storageUtils.ts\n");

/***/ })

};
;