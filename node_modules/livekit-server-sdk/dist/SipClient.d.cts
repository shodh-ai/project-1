import { SIPHeaderOptions, SIPTransport, RoomConfiguration, SIPTrunkInfo, SIPInboundTrunkInfo, SIPOutboundTrunkInfo, SIPDispatchRuleInfo, SIPParticipantInfo } from '@livekit/protocol';
import { ServiceBase } from './ServiceBase.cjs';
import './grants.cjs';
import 'jose';

/**
 * @deprecated use CreateSipInboundTrunkOptions or CreateSipOutboundTrunkOptions
 */
interface CreateSipTrunkOptions {
    name?: string;
    metadata?: string;
    inbound_addresses?: string[];
    inbound_numbers?: string[];
    inbound_username?: string;
    inbound_password?: string;
    outbound_address?: string;
    outbound_username?: string;
    outbound_password?: string;
}
interface CreateSipInboundTrunkOptions {
    metadata?: string;
    /** @deprecated - use `allowedAddresses` instead */
    allowed_addresses?: string[];
    allowedAddresses?: string[];
    /** @deprecated - use `allowedNumbers` instead */
    allowed_numbers?: string[];
    allowedNumbers?: string[];
    /** @deprecated - use `authUsername` instead */
    auth_username?: string;
    authUsername?: string;
    /** @deprecated - use `authPassword` instead */
    auth_password?: string;
    authPassword?: string;
    headers?: {
        [key: string]: string;
    };
    headersToAttributes?: {
        [key: string]: string;
    };
    includeHeaders?: SIPHeaderOptions;
    krispEnabled?: boolean;
}
interface CreateSipOutboundTrunkOptions {
    metadata?: string;
    transport: SIPTransport;
    /** @deprecated - use `authUsername` instead */
    auth_username?: string;
    authUsername?: string;
    /** @deprecated - use `authPassword` instead */
    auth_password?: string;
    authPassword?: string;
    headers?: {
        [key: string]: string;
    };
    headersToAttributes?: {
        [key: string]: string;
    };
    includeHeaders?: SIPHeaderOptions;
}
interface SipDispatchRuleDirect {
    type: 'direct';
    roomName: string;
    pin?: string;
}
interface SipDispatchRuleIndividual {
    type: 'individual';
    roomPrefix: string;
    pin?: string;
}
interface CreateSipDispatchRuleOptions {
    name?: string;
    metadata?: string;
    trunkIds?: string[];
    hidePhoneNumber?: boolean;
    attributes?: {
        [key: string]: string;
    };
    roomPreset?: string;
    roomConfig?: RoomConfiguration;
}
interface CreateSipParticipantOptions {
    fromNumber?: string;
    participantIdentity?: string;
    participantName?: string;
    participantMetadata?: string;
    participantAttributes?: {
        [key: string]: string;
    };
    dtmf?: string;
    /** @deprecated - use `playDialtone` instead */
    playRingtone?: boolean;
    playDialtone?: boolean;
    headers?: {
        [key: string]: string;
    };
    includeHeaders?: SIPHeaderOptions;
    hidePhoneNumber?: boolean;
    ringingTimeout?: number;
    maxCallDuration?: number;
    krispEnabled?: boolean;
}
interface TransferSipParticipantOptions {
    playDialtone?: boolean;
    headers?: {
        [key: string]: string;
    };
}
/**
 * Client to access Egress APIs
 */
declare class SipClient extends ServiceBase {
    private readonly rpc;
    /**
     * @param host - hostname including protocol. i.e. 'https://<project>.livekit.cloud'
     * @param apiKey - API Key, can be set in env var LIVEKIT_API_KEY
     * @param secret - API Secret, can be set in env var LIVEKIT_API_SECRET
     */
    constructor(host: string, apiKey?: string, secret?: string);
    /**
     * @param number - phone number of the trunk
     * @param opts - CreateSipTrunkOptions
     * @deprecated use `createSipInboundTrunk` or `createSipOutboundTrunk`
     */
    createSipTrunk(number: string, opts?: CreateSipTrunkOptions): Promise<SIPTrunkInfo>;
    /**
     * @param name - human-readable name of the trunk
     * @param numbers - phone numbers of the trunk
     * @param opts - CreateSipTrunkOptions
     */
    createSipInboundTrunk(name: string, numbers: string[], opts?: CreateSipInboundTrunkOptions): Promise<SIPInboundTrunkInfo>;
    /**
     * @param name - human-readable name of the trunk
     * @param address - hostname and port of the SIP server to dial
     * @param numbers - phone numbers of the trunk
     * @param opts - CreateSipTrunkOptions
     */
    createSipOutboundTrunk(name: string, address: string, numbers: string[], opts?: CreateSipOutboundTrunkOptions): Promise<SIPOutboundTrunkInfo>;
    /**
     * @deprecated use `listSipInboundTrunk` or `listSipOutboundTrunk`
     */
    listSipTrunk(): Promise<Array<SIPTrunkInfo>>;
    listSipInboundTrunk(): Promise<Array<SIPInboundTrunkInfo>>;
    listSipOutboundTrunk(): Promise<Array<SIPOutboundTrunkInfo>>;
    /**
     * @param sipTrunkId - sip trunk to delete
     */
    deleteSipTrunk(sipTrunkId: string): Promise<SIPTrunkInfo>;
    /**
     * @param rule - sip dispatch rule
     * @param opts - CreateSipDispatchRuleOptions
     */
    createSipDispatchRule(rule: SipDispatchRuleDirect | SipDispatchRuleIndividual, opts?: CreateSipDispatchRuleOptions): Promise<SIPDispatchRuleInfo>;
    listSipDispatchRule(): Promise<Array<SIPDispatchRuleInfo>>;
    /**
     * @param sipDispatchRuleId - sip trunk to delete
     */
    deleteSipDispatchRule(sipDispatchRuleId: string): Promise<SIPDispatchRuleInfo>;
    /**
     * @param sipTrunkId - sip trunk to use for the call
     * @param number - number to dial
     * @param roomName - room to attach the call to
     * @param opts - CreateSipParticipantOptions
     */
    createSipParticipant(sipTrunkId: string, number: string, roomName: string, opts?: CreateSipParticipantOptions): Promise<SIPParticipantInfo>;
    /**
     * @param roomName - room the SIP participant to transfer is connectd to
     * @param participantIdentity - identity of the SIP participant to transfer
     * @param transferTo - SIP URL to transfer the participant to
     */
    transferSipParticipant(roomName: string, participantIdentity: string, transferTo: string, opts?: TransferSipParticipantOptions): Promise<void>;
}

export { type CreateSipDispatchRuleOptions, type CreateSipInboundTrunkOptions, type CreateSipOutboundTrunkOptions, type CreateSipParticipantOptions, type CreateSipTrunkOptions, SipClient, type SipDispatchRuleDirect, type SipDispatchRuleIndividual, type TransferSipParticipantOptions };
