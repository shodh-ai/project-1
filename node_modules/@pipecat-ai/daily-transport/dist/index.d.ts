import { DailyCall, DailyFactoryOptions, DailyMediaDeviceInfo } from "@daily-co/daily-js";
import { RTVIClientOptions, RTVIMessage, Tracks, Transport, TransportState } from "@pipecat-ai/client-js";
export interface DailyTransportAuthBundle {
    room_url: string;
    token: string;
}
export interface DailyTransportConstructorOptions {
    bufferLocalAudioUntilBotReady?: boolean;
    dailyFactoryOptions?: DailyFactoryOptions;
}
export enum DailyRTVIMessageType {
    AUDIO_BUFFERING_STARTED = "audio-buffering-started",
    AUDIO_BUFFERING_STOPPED = "audio-buffering-stopped"
}
export class DailyTransport extends Transport {
    constructor({ dailyFactoryOptions, bufferLocalAudioUntilBotReady, }?: DailyTransportConstructorOptions);
    handleUserAudioStream(data: ArrayBuffer): void;
    _sendAudioBatch(dataBatch: ArrayBuffer[]): void;
    initialize(options: RTVIClientOptions, messageHandler: (ev: RTVIMessage) => void): void;
    get dailyCallClient(): DailyCall;
    get state(): TransportState;
    private set state(value);
    getAllCams(): Promise<DailyMediaDeviceInfo[]>;
    updateCam(camId: string): void;
    get selectedCam(): MediaDeviceInfo | Record<string, never>;
    getAllMics(): Promise<DailyMediaDeviceInfo[]>;
    updateMic(micId: string): void;
    get selectedMic(): MediaDeviceInfo | Record<string, never>;
    getAllSpeakers(): Promise<DailyMediaDeviceInfo[]>;
    updateSpeaker(speakerId: string): void;
    get selectedSpeaker(): MediaDeviceInfo | Record<string, never>;
    enableMic(enable: boolean): void;
    get isMicEnabled(): boolean;
    enableCam(enable: boolean): void;
    get isCamEnabled(): boolean;
    enableScreenShare(enable: boolean): void;
    get isSharingScreen(): boolean;
    tracks(): Tracks;
    preAuth(dailyFactoryOptions: DailyFactoryOptions): Promise<void>;
    initDevices(): Promise<void>;
    connect(authBundle: DailyTransportAuthBundle, abortController: AbortController): Promise<void>;
    sendReadyMessage(): Promise<void>;
    disconnect(): Promise<void>;
    sendMessage(message: RTVIMessage): void;
}

//# sourceMappingURL=index.d.ts.map
