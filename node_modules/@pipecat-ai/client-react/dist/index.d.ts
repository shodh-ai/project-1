import { RTVIClient, RTVIEvent, RTVIEventHandler, Tracks, TransportState } from "@pipecat-ai/client-js";
import { Provider } from "jotai/react";
import { JSX } from "react/jsx-runtime";
import React from "react";
interface Props {
    client: RTVIClient;
    jotaiStore?: React.ComponentProps<typeof Provider>["store"];
}
export const RTVIClientProvider: React.FC<React.PropsWithChildren<Props>>;
export const useRTVIClient: () => RTVIClient | undefined;
export const useRTVIClientEvent: <E extends RTVIEvent>(event: E, handler: RTVIEventHandler<E>) => void;
type ParticipantType = keyof Tracks;
type TrackType = keyof Tracks["local"];
export const useRTVIClientMediaTrack: (trackType: TrackType, participantType: ParticipantType) => MediaStreamTrack | null;
export const RTVIClientAudio: {
    (): JSX.Element;
    displayName: string;
};
interface RTVIClientVideoInterface {
    aspectRatio: number;
    height: number;
    width: number;
}
interface _Props1 extends Omit<React.VideoHTMLAttributes<HTMLVideoElement>, "onResize"> {
    participant: "local" | "bot";
    /**
     * Defines the video track type to display. Default: 'video'.
     */
    trackType?: "screenVideo" | "video";
    /**
     * Defines whether the video should be fully contained or cover the box. Default: 'contain'.
     */
    fit?: "contain" | "cover";
    /**
     * Forces the video to be mirrored, if set.
     */
    mirror?: boolean;
    /**
     * Optional callback, which is triggered whenever the video's rendered width or height changes.
     * Returns the video's native width, height and aspectRatio.
     */
    onResize?(dimensions: RTVIClientVideoInterface): void;
}
export const RTVIClientVideo: React.ForwardRefExoticComponent<_Props1 & React.RefAttributes<HTMLVideoElement>>;
type OptionalMediaDeviceInfo = MediaDeviceInfo | Record<string, never>;
export const useRTVIClientMediaDevices: () => {
    availableCams: MediaDeviceInfo[];
    availableMics: MediaDeviceInfo[];
    availableSpeakers: MediaDeviceInfo[];
    selectedCam: OptionalMediaDeviceInfo;
    selectedMic: OptionalMediaDeviceInfo;
    selectedSpeaker: OptionalMediaDeviceInfo;
    updateCam: (id: string) => void;
    updateMic: (id: string) => void;
    updateSpeaker: (id: string) => void;
};
export const useRTVIClientTransportState: () => TransportState;
type _ParticipantType1 = Parameters<typeof useRTVIClientMediaTrack>[1];
interface _Props2 {
    backgroundColor?: string;
    barColor?: string;
    barGap?: number;
    barWidth?: number;
    barMaxHeight?: number;
    participantType: _ParticipantType1;
}
export const VoiceVisualizer: React.FC<_Props2>;

//# sourceMappingURL=index.d.ts.map
