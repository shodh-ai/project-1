var $5Zyvw$reactjsxruntime = require("react/jsx-runtime");
var $5Zyvw$pipecataiclientjs = require("@pipecat-ai/client-js");
var $5Zyvw$react = require("react");
var $5Zyvw$jotai = require("jotai");
var $5Zyvw$jotaireact = require("jotai/react");
var $5Zyvw$jotaiutils = require("jotai/utils");


function $parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});
}

function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}

$parcel$export(module.exports, "RTVIClientAudio", () => $e6a9aa6ceb34e585$export$ba1245f7cbf3ae02);
$parcel$export(module.exports, "RTVIClientProvider", () => $0befa35d025c789a$export$4a4ae2d5dc96782);
$parcel$export(module.exports, "RTVIClientVideo", () => $c1952f9ddec789e5$export$d090a384943608eb);
$parcel$export(module.exports, "useRTVIClient", () => $8ee07494475a7fa7$export$31a5f6a22c9b8fba);
$parcel$export(module.exports, "useRTVIClientEvent", () => $8a6b68ebf0332682$export$33a6ac53b8f02625);
$parcel$export(module.exports, "useRTVIClientMediaDevices", () => $01bcacdf0a25e20c$export$652c54907b83a48d);
$parcel$export(module.exports, "useRTVIClientMediaTrack", () => $e5be552b22401c66$export$7c03381e0d26a6c3);
$parcel$export(module.exports, "useRTVIClientTransportState", () => $6b6c1a9f794236bd$export$599fa01283bd4ece);
$parcel$export(module.exports, "VoiceVisualizer", () => $a1dfa75b13e6bb9b$export$59bf27bd43679db6);
/**
 * Copyright (c) 2024, Daily.
 *
 * SPDX-License-Identifier: BSD-2-Clause
 */ 


/**
 * Copyright (c) 2024, Daily.
 *
 * SPDX-License-Identifier: BSD-2-Clause
 */ 
/**
 * Copyright (c) 2024, Daily.
 *
 * SPDX-License-Identifier: BSD-2-Clause
 */ 




const $0befa35d025c789a$var$defaultStore = (0, $5Zyvw$jotai.createStore)();
const $0befa35d025c789a$export$8d2b07cbee622e7c = /*#__PURE__*/ (0, $5Zyvw$react.createContext)({});
const $0befa35d025c789a$export$4a4ae2d5dc96782 = ({ children: children, client: client, jotaiStore: jotaiStore = $0befa35d025c789a$var$defaultStore })=>{
    return (0, $5Zyvw$reactjsxruntime.jsx)((0, $5Zyvw$jotaireact.Provider), {
        store: jotaiStore,
        children: (0, $5Zyvw$reactjsxruntime.jsx)($0befa35d025c789a$export$8d2b07cbee622e7c.Provider, {
            value: {
                client: client
            },
            children: children
        })
    });
};
$0befa35d025c789a$export$4a4ae2d5dc96782.displayName = "RTVIClientProvider";


const $8ee07494475a7fa7$export$31a5f6a22c9b8fba = ()=>{
    const { client: client } = (0, $5Zyvw$react.useContext)((0, $0befa35d025c789a$export$8d2b07cbee622e7c));
    return client;
};


const $8a6b68ebf0332682$export$33a6ac53b8f02625 = (event, handler)=>{
    const client = (0, $8ee07494475a7fa7$export$31a5f6a22c9b8fba)();
    (0, $5Zyvw$react.useEffect)(()=>{
        if (!client) return;
        client.on(event, handler);
        return ()=>{
            client.off(event, handler);
        };
    }, [
        event,
        handler,
        client
    ]);
};


/**
 * Copyright (c) 2024, Daily.
 *
 * SPDX-License-Identifier: BSD-2-Clause
 */ 





const $e5be552b22401c66$var$localAudioTrackAtom = (0, $5Zyvw$jotai.atom)(null);
const $e5be552b22401c66$var$localVideoTrackAtom = (0, $5Zyvw$jotai.atom)(null);
const $e5be552b22401c66$var$localScreenAudioTrackAtom = (0, $5Zyvw$jotai.atom)(null);
const $e5be552b22401c66$var$localScreenVideoTrackAtom = (0, $5Zyvw$jotai.atom)(null);
const $e5be552b22401c66$var$botAudioTrackAtom = (0, $5Zyvw$jotai.atom)(null);
const $e5be552b22401c66$var$botVideoTrackAtom = (0, $5Zyvw$jotai.atom)(null);
const $e5be552b22401c66$var$trackAtom = (0, $5Zyvw$jotaiutils.atomFamily)(({ local: local, trackType: trackType })=>{
    if (local) switch(trackType){
        case "audio":
            return $e5be552b22401c66$var$localAudioTrackAtom;
        case "screenAudio":
            return $e5be552b22401c66$var$localScreenAudioTrackAtom;
        case "screenVideo":
            return $e5be552b22401c66$var$localScreenVideoTrackAtom;
        case "video":
            return $e5be552b22401c66$var$localVideoTrackAtom;
    }
    return trackType === "audio" ? $e5be552b22401c66$var$botAudioTrackAtom : $e5be552b22401c66$var$botVideoTrackAtom;
});
const $e5be552b22401c66$export$7c03381e0d26a6c3 = (trackType, participantType)=>{
    const client = (0, $8ee07494475a7fa7$export$31a5f6a22c9b8fba)();
    const track = (0, $5Zyvw$jotai.useAtomValue)($e5be552b22401c66$var$trackAtom({
        local: participantType === "local",
        trackType: trackType
    }));
    const updateTrack = (0, $5Zyvw$jotaiutils.useAtomCallback)((0, $5Zyvw$react.useCallback)((get, set, track, trackType, local)=>{
        const atom = $e5be552b22401c66$var$trackAtom({
            local: local,
            trackType: trackType
        });
        const oldTrack = get(atom);
        if (oldTrack?.id === track.id) return;
        set(atom, track);
    }, [
        participantType,
        track,
        trackType
    ]));
    (0, $8a6b68ebf0332682$export$33a6ac53b8f02625)((0, $5Zyvw$pipecataiclientjs.RTVIEvent).TrackStarted, (0, $5Zyvw$react.useCallback)((track, participant)=>{
        updateTrack(track, track.kind, Boolean(participant?.local));
    }, []));
    (0, $8a6b68ebf0332682$export$33a6ac53b8f02625)((0, $5Zyvw$pipecataiclientjs.RTVIEvent).ScreenTrackStarted, (0, $5Zyvw$react.useCallback)((track, participant)=>{
        const trackType = track.kind === "audio" ? "screenAudio" : "screenVideo";
        updateTrack(track, trackType, Boolean(participant?.local));
    }, []));
    (0, $5Zyvw$react.useEffect)(()=>{
        if (!client) return;
        const tracks = client.tracks();
        const track = tracks?.[participantType]?.[trackType];
        if (!track) return;
        updateTrack(track, trackType, participantType === "local");
    }, [
        participantType,
        trackType,
        updateTrack,
        client
    ]);
    return track;
};


const $e6a9aa6ceb34e585$export$ba1245f7cbf3ae02 = ()=>{
    const botAudioRef = (0, $5Zyvw$react.useRef)(null);
    const botAudioTrack = (0, $e5be552b22401c66$export$7c03381e0d26a6c3)("audio", "bot");
    (0, $5Zyvw$react.useEffect)(()=>{
        if (!botAudioRef.current || !botAudioTrack) return;
        if (botAudioRef.current.srcObject) {
            const oldTrack = botAudioRef.current.srcObject.getAudioTracks()[0];
            if (oldTrack.id === botAudioTrack.id) return;
        }
        botAudioRef.current.srcObject = new MediaStream([
            botAudioTrack
        ]);
    }, [
        botAudioTrack
    ]);
    (0, $8a6b68ebf0332682$export$33a6ac53b8f02625)((0, $5Zyvw$pipecataiclientjs.RTVIEvent).SpeakerUpdated, (0, $5Zyvw$react.useCallback)((speaker)=>{
        if (!botAudioRef.current) return;
        if (typeof botAudioRef.current.setSinkId !== "function") return;
        botAudioRef.current.setSinkId(speaker.deviceId);
    }, []));
    return (0, $5Zyvw$reactjsxruntime.jsx)((0, $5Zyvw$reactjsxruntime.Fragment), {
        children: (0, $5Zyvw$reactjsxruntime.jsx)("audio", {
            ref: botAudioRef,
            autoPlay: true
        })
    });
};
$e6a9aa6ceb34e585$export$ba1245f7cbf3ae02.displayName = "RTVIClientAudio";





/**
 * Copyright (c) 2024, Daily.
 *
 * SPDX-License-Identifier: BSD-2-Clause
 *
 * This file contains code derived from:
 * https://github.com/jaredLunde/react-hook/blob/master/packages/merged-ref/src/index.tsx
 * Original author: Jared Lunde (https://github.com/jaredLunde)
 * Original license: MIT (https://github.com/jaredLunde/react-hook/blob/master/LICENSE)
 */ 
function $a73c18d97634a8ff$var$useMergedRef(...refs) {
    return (0, $5Zyvw$react.useCallback)((element)=>{
        for(let i = 0; i < refs.length; i++){
            const ref = refs[i];
            if (typeof ref === "function") ref(element);
            else if (ref && typeof ref === "object") ref.current = element;
        }
    }, // eslint-disable-next-line react-hooks/exhaustive-deps
    refs);
}
var $a73c18d97634a8ff$export$2e2bcd8739ae039 = $a73c18d97634a8ff$var$useMergedRef;



const $c1952f9ddec789e5$export$d090a384943608eb = /*#__PURE__*/ (0, $5Zyvw$react.forwardRef)(function VoiceClientVideo({ participant: participant = "local", fit: fit = "contain", mirror: mirror, onResize: onResize, style: style = {}, trackType: trackType = "video", ...props }, ref) {
    const videoTrack = (0, $e5be552b22401c66$export$7c03381e0d26a6c3)(trackType, participant);
    const videoEl = (0, $5Zyvw$react.useRef)(null);
    const videoRef = (0, $a73c18d97634a8ff$export$2e2bcd8739ae039)(videoEl, ref);
    /**
     * Handle canplay & picture-in-picture events.
     */ (0, $5Zyvw$react.useEffect)(function setupVideoEvents() {
        const video = videoEl.current;
        if (!video) return;
        const playVideo = ()=>{
            const promise = video.play();
            if (promise !== undefined) promise.then(()=>{
                // All good, playback started.
                video.controls = false;
            }).catch((error)=>{
                // Auto-play was prevented. Show video controls, so user can play video manually.
                video.controls = true;
                console.warn("Failed to play video", error);
            });
        };
        const handleCanPlay = ()=>{
            if (!video.paused) return;
            playVideo();
        };
        const handleEnterPIP = ()=>{
            video.style.transform = "scale(1)";
        };
        const handleLeavePIP = ()=>{
            video.style.transform = "";
            setTimeout(()=>{
                if (video.paused) playVideo();
            }, 100);
        };
        const handleVisibilityChange = ()=>{
            if (document.visibilityState === "hidden") return;
            if (!video.paused) return;
            playVideo();
        };
        video.addEventListener("canplay", handleCanPlay);
        video.addEventListener("enterpictureinpicture", handleEnterPIP);
        video.addEventListener("leavepictureinpicture", handleLeavePIP);
        // Videos can be paused if media was played in another app on iOS.
        document.addEventListener("visibilitychange", handleVisibilityChange);
        return ()=>{
            video.removeEventListener("canplay", handleCanPlay);
            video.removeEventListener("enterpictureinpicture", handleEnterPIP);
            video.removeEventListener("leavepictureinpicture", handleLeavePIP);
            document.removeEventListener("visibilitychange", handleVisibilityChange);
        };
    }, []);
    /**
     * Update srcObject.
     */ (0, $5Zyvw$react.useEffect)(function updateSrcObject() {
        const video = videoEl.current;
        if (!video || !videoTrack) return;
        video.srcObject = new MediaStream([
            videoTrack
        ]);
        video.load();
        return ()=>{
            // clean up when unmounted
            video.srcObject = null;
            video.load();
        };
    }, [
        videoTrack,
        videoTrack?.id
    ]);
    /**
     * Add optional event listener for resize event so the parent component
     * can know the video's native aspect ratio.
     */ (0, $5Zyvw$react.useEffect)(function reportVideoDimensions() {
        const video = videoEl.current;
        if (!onResize || !video) return;
        let frame;
        function handleResize() {
            if (frame) cancelAnimationFrame(frame);
            frame = requestAnimationFrame(()=>{
                const video = videoEl.current;
                if (!video || document.hidden) return;
                const videoWidth = video.videoWidth;
                const videoHeight = video.videoHeight;
                if (videoWidth && videoHeight) onResize?.({
                    aspectRatio: videoWidth / videoHeight,
                    height: videoHeight,
                    width: videoWidth
                });
            });
        }
        handleResize();
        video.addEventListener("loadedmetadata", handleResize);
        video.addEventListener("resize", handleResize);
        return ()=>{
            if (frame) cancelAnimationFrame(frame);
            video.removeEventListener("loadedmetadata", handleResize);
            video.removeEventListener("resize", handleResize);
        };
    }, [
        onResize
    ]);
    return (0, $5Zyvw$reactjsxruntime.jsx)("video", {
        autoPlay: true,
        muted: true,
        playsInline: true,
        ref: videoRef,
        style: {
            objectFit: fit,
            transform: mirror ? "scale(-1, 1)" : "",
            ...style
        },
        ...props
    });
});
$c1952f9ddec789e5$export$d090a384943608eb.displayName = "RTVIClientVideo";










const $01bcacdf0a25e20c$var$availableMicsAtom = (0, $5Zyvw$jotai.atom)([]);
const $01bcacdf0a25e20c$var$availableCamsAtom = (0, $5Zyvw$jotai.atom)([]);
const $01bcacdf0a25e20c$var$availableSpeakersAtom = (0, $5Zyvw$jotai.atom)([]);
const $01bcacdf0a25e20c$var$selectedMicAtom = (0, $5Zyvw$jotai.atom)({});
const $01bcacdf0a25e20c$var$selectedCamAtom = (0, $5Zyvw$jotai.atom)({});
const $01bcacdf0a25e20c$var$selectedSpeakerAtom = (0, $5Zyvw$jotai.atom)({});
const $01bcacdf0a25e20c$export$652c54907b83a48d = ()=>{
    const client = (0, $8ee07494475a7fa7$export$31a5f6a22c9b8fba)();
    const availableCams = (0, $5Zyvw$jotai.useAtomValue)($01bcacdf0a25e20c$var$availableCamsAtom);
    const availableMics = (0, $5Zyvw$jotai.useAtomValue)($01bcacdf0a25e20c$var$availableMicsAtom);
    const availableSpeakers = (0, $5Zyvw$jotai.useAtomValue)($01bcacdf0a25e20c$var$availableSpeakersAtom);
    const selectedCam = (0, $5Zyvw$jotai.useAtomValue)($01bcacdf0a25e20c$var$selectedCamAtom);
    const selectedMic = (0, $5Zyvw$jotai.useAtomValue)($01bcacdf0a25e20c$var$selectedMicAtom);
    const selectedSpeaker = (0, $5Zyvw$jotai.useAtomValue)($01bcacdf0a25e20c$var$selectedSpeakerAtom);
    (0, $8a6b68ebf0332682$export$33a6ac53b8f02625)((0, $5Zyvw$pipecataiclientjs.RTVIEvent).AvailableCamsUpdated, (0, $5Zyvw$jotaiutils.useAtomCallback)((0, $5Zyvw$react.useCallback)((_get, set, cams)=>{
        set($01bcacdf0a25e20c$var$availableCamsAtom, cams);
    }, [])));
    (0, $8a6b68ebf0332682$export$33a6ac53b8f02625)((0, $5Zyvw$pipecataiclientjs.RTVIEvent).AvailableMicsUpdated, (0, $5Zyvw$jotaiutils.useAtomCallback)((0, $5Zyvw$react.useCallback)((_get, set, mics)=>{
        set($01bcacdf0a25e20c$var$availableMicsAtom, mics);
    }, [])));
    (0, $8a6b68ebf0332682$export$33a6ac53b8f02625)((0, $5Zyvw$pipecataiclientjs.RTVIEvent).AvailableSpeakersUpdated, (0, $5Zyvw$jotaiutils.useAtomCallback)((0, $5Zyvw$react.useCallback)((_get, set, speakers)=>{
        set($01bcacdf0a25e20c$var$availableSpeakersAtom, speakers);
    }, [])));
    (0, $8a6b68ebf0332682$export$33a6ac53b8f02625)((0, $5Zyvw$pipecataiclientjs.RTVIEvent).CamUpdated, (0, $5Zyvw$jotaiutils.useAtomCallback)((0, $5Zyvw$react.useCallback)((_get, set, cam)=>{
        set($01bcacdf0a25e20c$var$selectedCamAtom, cam);
    }, [])));
    (0, $8a6b68ebf0332682$export$33a6ac53b8f02625)((0, $5Zyvw$pipecataiclientjs.RTVIEvent).MicUpdated, (0, $5Zyvw$jotaiutils.useAtomCallback)((0, $5Zyvw$react.useCallback)((_get, set, mic)=>{
        set($01bcacdf0a25e20c$var$selectedMicAtom, mic);
    }, [])));
    (0, $8a6b68ebf0332682$export$33a6ac53b8f02625)((0, $5Zyvw$pipecataiclientjs.RTVIEvent).SpeakerUpdated, (0, $5Zyvw$jotaiutils.useAtomCallback)((0, $5Zyvw$react.useCallback)((_get, set, speaker)=>{
        set($01bcacdf0a25e20c$var$selectedSpeakerAtom, speaker);
    }, [])));
    const updateCam = (0, $5Zyvw$react.useCallback)((id)=>{
        client?.updateCam(id);
    }, [
        client
    ]);
    const updateMic = (0, $5Zyvw$react.useCallback)((id)=>{
        client?.updateMic(id);
    }, [
        client
    ]);
    const updateSpeaker = (0, $5Zyvw$react.useCallback)((id)=>{
        client?.updateSpeaker(id);
    }, [
        client
    ]);
    return {
        availableCams: availableCams,
        availableMics: availableMics,
        availableSpeakers: availableSpeakers,
        selectedCam: selectedCam,
        selectedMic: selectedMic,
        selectedSpeaker: selectedSpeaker,
        updateCam: updateCam,
        updateMic: updateMic,
        updateSpeaker: updateSpeaker
    };
};



/**
 * Copyright (c) 2024, Daily.
 *
 * SPDX-License-Identifier: BSD-2-Clause
 */ 


const $6b6c1a9f794236bd$var$transportStateAtom = (0, $5Zyvw$jotai.atom)("disconnected");
const $6b6c1a9f794236bd$export$599fa01283bd4ece = ()=>{
    const [transportState, setTransportState] = (0, $5Zyvw$jotai.useAtom)($6b6c1a9f794236bd$var$transportStateAtom);
    (0, $8a6b68ebf0332682$export$33a6ac53b8f02625)((0, $5Zyvw$pipecataiclientjs.RTVIEvent).TransportStateChanged, setTransportState);
    return transportState;
};





const $a1dfa75b13e6bb9b$export$59bf27bd43679db6 = /*#__PURE__*/ (0, ($parcel$interopDefault($5Zyvw$react))).memo(({ backgroundColor: backgroundColor = "transparent", barColor: barColor = "black", barWidth: barWidth = 30, barGap: barGap = 12, barMaxHeight: barMaxHeight = 120, participantType: participantType })=>{
    const canvasRef = (0, $5Zyvw$react.useRef)(null);
    const track = (0, $e5be552b22401c66$export$7c03381e0d26a6c3)("audio", participantType);
    (0, $5Zyvw$react.useEffect)(()=>{
        if (!canvasRef.current) return;
        const canvasWidth = 5 * barWidth + 4 * barGap;
        const canvasHeight = barMaxHeight;
        const canvas = canvasRef.current;
        const scaleFactor = 2;
        // Make canvas fill the width and height of its container
        const resizeCanvas = ()=>{
            canvas.width = canvasWidth * scaleFactor;
            canvas.height = canvasHeight * scaleFactor;
            canvas.style.width = `${canvasWidth}px`;
            canvas.style.height = `${canvasHeight}px`;
            canvasCtx.lineCap = "round";
            canvasCtx.scale(scaleFactor, scaleFactor);
        };
        const canvasCtx = canvas.getContext("2d");
        resizeCanvas();
        if (!track) return;
        const audioContext = new AudioContext();
        const source = audioContext.createMediaStreamSource(new MediaStream([
            track
        ]));
        const analyser = audioContext.createAnalyser();
        analyser.fftSize = 1024;
        source.connect(analyser);
        const frequencyData = new Uint8Array(analyser.frequencyBinCount);
        canvasCtx.lineCap = "round";
        const bands = [
            {
                startFreq: 85,
                endFreq: 255,
                smoothValue: 0
            },
            {
                startFreq: 255,
                endFreq: 500,
                smoothValue: 0
            },
            {
                startFreq: 500,
                endFreq: 2000,
                smoothValue: 0
            },
            {
                startFreq: 2000,
                endFreq: 4000,
                smoothValue: 0
            },
            {
                startFreq: 4000,
                endFreq: 8000,
                smoothValue: 0
            }
        ];
        const getFrequencyBinIndex = (frequency)=>{
            const nyquist = audioContext.sampleRate / 2;
            return Math.round(frequency / nyquist * (analyser.frequencyBinCount - 1));
        };
        function drawSpectrum() {
            analyser.getByteFrequencyData(frequencyData);
            canvasCtx.clearRect(0, 0, canvas.width / scaleFactor, canvas.height / scaleFactor);
            canvasCtx.fillStyle = backgroundColor;
            canvasCtx.fillRect(0, 0, canvas.width / scaleFactor, canvas.height / scaleFactor);
            let isActive = false;
            const totalBarsWidth = bands.length * barWidth + (bands.length - 1) * barGap;
            const startX = (canvas.width / scaleFactor - totalBarsWidth) / 2; // Center bars
            const adjustedCircleRadius = barWidth / 2; // Fixed radius for reset circles
            bands.forEach((band, i)=>{
                const startIndex = getFrequencyBinIndex(band.startFreq);
                const endIndex = getFrequencyBinIndex(band.endFreq);
                const bandData = frequencyData.slice(startIndex, endIndex);
                const bandValue = bandData.reduce((acc, val)=>acc + val, 0) / bandData.length;
                const smoothingFactor = 0.2;
                if (bandValue < 1) band.smoothValue = Math.max(band.smoothValue - smoothingFactor * 5, 0);
                else {
                    band.smoothValue = band.smoothValue + (bandValue - band.smoothValue) * smoothingFactor;
                    isActive = true;
                }
                const x = startX + i * (barWidth + barGap);
                // Calculate bar height with a maximum cap
                const barHeight = Math.min(band.smoothValue / 255 * barMaxHeight, barMaxHeight);
                const yTop = Math.max(canvas.height / scaleFactor / 2 - barHeight / 2, adjustedCircleRadius);
                const yBottom = Math.min(canvas.height / scaleFactor / 2 + barHeight / 2, canvas.height / scaleFactor - adjustedCircleRadius);
                if (band.smoothValue > 0) {
                    canvasCtx.beginPath();
                    canvasCtx.moveTo(x + barWidth / 2, yTop);
                    canvasCtx.lineTo(x + barWidth / 2, yBottom);
                    canvasCtx.lineWidth = barWidth;
                    canvasCtx.strokeStyle = barColor;
                    canvasCtx.stroke();
                } else {
                    canvasCtx.beginPath();
                    canvasCtx.arc(x + barWidth / 2, canvas.height / scaleFactor / 2, adjustedCircleRadius, 0, 2 * Math.PI);
                    canvasCtx.fillStyle = barColor;
                    canvasCtx.fill();
                    canvasCtx.closePath();
                }
            });
            if (!isActive) drawInactiveCircles(adjustedCircleRadius, barColor);
            requestAnimationFrame(drawSpectrum);
        }
        function drawInactiveCircles(circleRadius, color) {
            const totalBarsWidth = bands.length * barWidth + (bands.length - 1) * barGap;
            const startX = (canvas.width / scaleFactor - totalBarsWidth) / 2;
            const y = canvas.height / scaleFactor / 2;
            bands.forEach((_, i)=>{
                const x = startX + i * (barWidth + barGap);
                canvasCtx.beginPath();
                canvasCtx.arc(x + barWidth / 2, y, circleRadius, 0, 2 * Math.PI);
                canvasCtx.fillStyle = color;
                canvasCtx.fill();
                canvasCtx.closePath();
            });
        }
        drawSpectrum();
        // Handle resizing
        window.addEventListener("resize", resizeCanvas);
        return ()=>{
            audioContext.close();
            window.removeEventListener("resize", resizeCanvas);
        };
    }, [
        backgroundColor,
        barColor,
        barGap,
        barMaxHeight,
        barWidth,
        track
    ]);
    return (0, $5Zyvw$reactjsxruntime.jsx)("canvas", {
        ref: canvasRef,
        style: {
            display: "block",
            width: "100%",
            height: "100%"
        }
    });
});
$a1dfa75b13e6bb9b$export$59bf27bd43679db6.displayName = "VoiceVisualizer";




//# sourceMappingURL=index.js.map
